
HeartBeatSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002dfe  00002e92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800074  00800074  00002ea6  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ca  00000000  00000000  000054c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000688e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000069ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ac48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000adc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 13 	call	0x2744	; 0x2744 <main>
      8a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_Int>:
#include"ADC.h"
#include "utils.h"
#include "DIO.h"
#include "memmap.h"

 void ADC_Int(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(ADCSRA,ADEN); // enable ADC
     ca6:	a6 e2       	ldi	r26, 0x26	; 38
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e6 e2       	ldi	r30, 0x26	; 38
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,ADPS2); // determine the prescalar divide factor...
     cb4:	a6 e2       	ldi	r26, 0x26	; 38
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	84 60       	ori	r24, 0x04	; 4
     cc0:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,ADPS1);
     cc2:	a6 e2       	ldi	r26, 0x26	; 38
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e2       	ldi	r30, 0x26	; 38
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,ADPS0);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	8c 93       	st	X, r24
	 // after the prescalar determine the Reference selection..
	 SET_BIT(ADCMUX,REFS0);
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	 SET_BIT(ADCMUX,REFS1);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24
 }
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <ADC_StartSingleConversion>:

 void ADC_StartSingleConversion(ADC_CHANNEL_T pin ){
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	89 83       	std	Y+1, r24	; 0x01
	// MOD_REG(ADCMUX,pin); //
	  ADCMUX |= pin;  // determine the channel
     d0c:	a7 e2       	ldi	r26, 0x27	; 39
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e7 e2       	ldi	r30, 0x27	; 39
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	90 81       	ld	r25, Z
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	89 2b       	or	r24, r25
     d1a:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,ADSC); // start conversion
     d1c:	a6 e2       	ldi	r26, 0x26	; 38
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e6 e2       	ldi	r30, 0x26	; 38
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 64       	ori	r24, 0x40	; 64
     d28:	8c 93       	st	X, r24

	/*  while the conversion is not processed halt the processor
	 (read the flag bit if = 0  conversion not finished)
       if = 1  conversion finished */
 	 while(GET_BIT(ADCSRA,ADIF) == 0);
     d2a:	e6 e2       	ldi	r30, 0x26	; 38
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	80 71       	andi	r24, 0x10	; 16
     d36:	90 70       	andi	r25, 0x00	; 0
     d38:	95 95       	asr	r25
     d3a:	87 95       	ror	r24
     d3c:	95 95       	asr	r25
     d3e:	87 95       	ror	r24
     d40:	95 95       	asr	r25
     d42:	87 95       	ror	r24
     d44:	95 95       	asr	r25
     d46:	87 95       	ror	r24
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	79 f3       	breq	.-34     	; 0xd2a <ADC_StartSingleConversion+0x2a>
	 /* if conversion is processed set the flag to be cleared by AND gate.. cleared mean that there is no conversion
	  * in this function the ADC will make one conversion and flag bit will cleared ..
	  * (put function in while(1) to make ADC convert more than one time) */
	 SET_BIT(ADCSRA,ADIF);
     d4c:	a6 e2       	ldi	r26, 0x26	; 38
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	8c 93       	st	X, r24

 }
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <ADC_AutoTriggerConversion>:
  void ADC_AutoTriggerConversion(ADC_CHANNEL_T pin){
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	89 83       	std	Y+1, r24	; 0x01
	  ADCMUX |= pin;
     d6e:	a7 e2       	ldi	r26, 0x27	; 39
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e7 e2       	ldi	r30, 0x27	; 39
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	90 81       	ld	r25, Z
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	89 2b       	or	r24, r25
     d7c:	8c 93       	st	X, r24
	  	 SET_BIT(ADCSRA,ADSC);
     d7e:	a6 e2       	ldi	r26, 0x26	; 38
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e6 e2       	ldi	r30, 0x26	; 38
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 64       	ori	r24, 0x40	; 64
     d8a:	8c 93       	st	X, r24
	  	 SET_BIT(ADCSRA,ADATE);
     d8c:	a6 e2       	ldi	r26, 0x26	; 38
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e6 e2       	ldi	r30, 0x26	; 38
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 62       	ori	r24, 0x20	; 32
     d98:	8c 93       	st	X, r24
	  	 CLR_BIT(SFIOR,ADTS2);
     d9a:	a0 e5       	ldi	r26, 0x50	; 80
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e0 e5       	ldi	r30, 0x50	; 80
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 77       	andi	r24, 0x7F	; 127
     da6:	8c 93       	st	X, r24
	  	 CLR_BIT(SFIOR,ADTS1);
     da8:	a0 e5       	ldi	r26, 0x50	; 80
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e0 e5       	ldi	r30, 0x50	; 80
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 7b       	andi	r24, 0xBF	; 191
     db4:	8c 93       	st	X, r24
	  	 CLR_BIT(SFIOR,ADTS0);
     db6:	a0 e5       	ldi	r26, 0x50	; 80
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e0 e5       	ldi	r30, 0x50	; 80
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8f 7d       	andi	r24, 0xDF	; 223
     dc2:	8c 93       	st	X, r24

	  	/*  while the conversion is not processed halt the processor
	  	 (read the flag bit if = 0  conversion not finished)
	         if = 1  conversion finished */
	   	 while(GET_BIT(ADCSRA,ADIF) == 0);
     dc4:	e6 e2       	ldi	r30, 0x26	; 38
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	80 71       	andi	r24, 0x10	; 16
     dd0:	90 70       	andi	r25, 0x00	; 0
     dd2:	95 95       	asr	r25
     dd4:	87 95       	ror	r24
     dd6:	95 95       	asr	r25
     dd8:	87 95       	ror	r24
     dda:	95 95       	asr	r25
     ddc:	87 95       	ror	r24
     dde:	95 95       	asr	r25
     de0:	87 95       	ror	r24
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	79 f3       	breq	.-34     	; 0xdc4 <ADC_AutoTriggerConversion+0x62>
	  	 /* if conversion is processed set the flag to be cleared by AND gate.. cleared mean that there is no conversion
	  	  *  to allow ADC to make a new conversion.. in this function ADC make new conversion auto if flag bit is cleared ..
	  	  *  */
	  	 SET_BIT(ADCSRA,ADIF);
     de6:	a6 e2       	ldi	r26, 0x26	; 38
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e6 e2       	ldi	r30, 0x26	; 38
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 61       	ori	r24, 0x10	; 16
     df2:	8c 93       	st	X, r24

 }
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <ADC_GETVALUE>:

  uint16 ADC_GETVALUE(void){
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <ADC_GETVALUE+0x6>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62

	  uint16 value = ADCL | (ADCH <<8);
     e06:	e4 e2       	ldi	r30, 0x24	; 36
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	e5 e2       	ldi	r30, 0x25	; 37
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	98 2f       	mov	r25, r24
     e1c:	88 27       	eor	r24, r24
     e1e:	82 2b       	or	r24, r18
     e20:	93 2b       	or	r25, r19
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
	  return value;
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02

  }
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <Read_Analog>:


  uint16 Read_Analog(ADC_CHANNEL_T pin){
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <Read_Analog+0x6>
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	8b 83       	std	Y+3, r24	; 0x03

    	  ADCMUX |= pin;  // determine the channel
     e42:	a7 e2       	ldi	r26, 0x27	; 39
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e2       	ldi	r30, 0x27	; 39
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	90 81       	ld	r25, Z
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	89 2b       	or	r24, r25
     e50:	8c 93       	st	X, r24
    		 SET_BIT(ADCSRA,ADSC); // start conversion
     e52:	a6 e2       	ldi	r26, 0x26	; 38
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e6 e2       	ldi	r30, 0x26	; 38
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8c 93       	st	X, r24

    		/*  while the conversion is not processed halt the processor
    		 (read the flag bit if = 0  conversion not finished)
    	       if = 1  conversion finished */
    	 	 while(GET_BIT(ADCSRA,ADIF) == 0);
     e60:	e6 e2       	ldi	r30, 0x26	; 38
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	80 71       	andi	r24, 0x10	; 16
     e6c:	90 70       	andi	r25, 0x00	; 0
     e6e:	95 95       	asr	r25
     e70:	87 95       	ror	r24
     e72:	95 95       	asr	r25
     e74:	87 95       	ror	r24
     e76:	95 95       	asr	r25
     e78:	87 95       	ror	r24
     e7a:	95 95       	asr	r25
     e7c:	87 95       	ror	r24
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	79 f3       	breq	.-34     	; 0xe60 <Read_Analog+0x2c>
    		 /* if conversion is processed set the flag to be cleared by AND gate.. cleared mean that there is no conversion
    		  * in this function the ADC will make one conversion and flag bit will cleared ..
    		  * (put function in while(1) to make ADC convert more than one time) */
    		 SET_BIT(ADCSRA,ADIF);
     e82:	a6 e2       	ldi	r26, 0x26	; 38
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e6 e2       	ldi	r30, 0x26	; 38
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 61       	ori	r24, 0x10	; 16
     e8e:	8c 93       	st	X, r24

    	  uint16 value = ADCL | (ADCH <<8);
     e90:	e4 e2       	ldi	r30, 0x24	; 36
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	e5 e2       	ldi	r30, 0x25	; 37
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	98 2f       	mov	r25, r24
     ea6:	88 27       	eor	r24, r24
     ea8:	82 2b       	or	r24, r18
     eaa:	93 2b       	or	r25, r19
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
    	  return value;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02

      }
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <DIO_SetPinDirection>:
#include"utils.h"
#include"memmap.h"
#include"DIO.h"

// Function set pin.
DIOStatus_t DIO_SetPinDirection(DIOPortID_t port,DIOPinID_t pin,DIODIRECTION_t dir){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	2e 97       	sbiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	6a 83       	std	Y+2, r22	; 0x02
     ed8:	4b 83       	std	Y+3, r20	; 0x03
if (pin <= Pin7 && port <=PD ){
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	88 30       	cpi	r24, 0x08	; 8
     ede:	08 f0       	brcs	.+2      	; 0xee2 <DIO_SetPinDirection+0x22>
     ee0:	bb c1       	rjmp	.+886    	; 0x1258 <DIO_SetPinDirection+0x398>
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	08 f0       	brcs	.+2      	; 0xeea <DIO_SetPinDirection+0x2a>
     ee8:	b7 c1       	rjmp	.+878    	; 0x1258 <DIO_SetPinDirection+0x398>

	switch(port){
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3e 87       	std	Y+14, r19	; 0x0e
     ef2:	2d 87       	std	Y+13, r18	; 0x0d
     ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	91 05       	cpc	r25, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <DIO_SetPinDirection+0x40>
     efe:	7c c0       	rjmp	.+248    	; 0xff8 <DIO_SetPinDirection+0x138>
     f00:	2d 85       	ldd	r18, Y+13	; 0x0d
     f02:	3e 85       	ldd	r19, Y+14	; 0x0e
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	2c f4       	brge	.+10     	; 0xf14 <DIO_SetPinDirection+0x54>
     f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	71 f0       	breq	.+28     	; 0xf2e <DIO_SetPinDirection+0x6e>
     f12:	a0 c1       	rjmp	.+832    	; 0x1254 <DIO_SetPinDirection+0x394>
     f14:	2d 85       	ldd	r18, Y+13	; 0x0d
     f16:	3e 85       	ldd	r19, Y+14	; 0x0e
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_SetPinDirection+0x60>
     f1e:	d1 c0       	rjmp	.+418    	; 0x10c2 <DIO_SetPinDirection+0x202>
     f20:	8d 85       	ldd	r24, Y+13	; 0x0d
     f22:	9e 85       	ldd	r25, Y+14	; 0x0e
     f24:	83 30       	cpi	r24, 0x03	; 3
     f26:	91 05       	cpc	r25, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_SetPinDirection+0x6c>
     f2a:	30 c1       	rjmp	.+608    	; 0x118c <DIO_SetPinDirection+0x2cc>
     f2c:	93 c1       	rjmp	.+806    	; 0x1254 <DIO_SetPinDirection+0x394>
	case PA:
		switch(dir){
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	3c 87       	std	Y+12, r19	; 0x0c
     f36:	2b 87       	std	Y+11, r18	; 0x0b
     f38:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	91 05       	cpc	r25, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <DIO_SetPinDirection+0x84>
     f42:	45 c0       	rjmp	.+138    	; 0xfce <DIO_SetPinDirection+0x10e>
     f44:	2b 85       	ldd	r18, Y+11	; 0x0b
     f46:	3c 85       	ldd	r19, Y+12	; 0x0c
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	c9 f0       	breq	.+50     	; 0xf80 <DIO_SetPinDirection+0xc0>
     f4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f50:	9c 85       	ldd	r25, Y+12	; 0x0c
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	09 f0       	breq	.+2      	; 0xf58 <DIO_SetPinDirection+0x98>
     f56:	7e c1       	rjmp	.+764    	; 0x1254 <DIO_SetPinDirection+0x394>
		case OUT:
			SET_BIT(DDRA,pin);
     f58:	aa e3       	ldi	r26, 0x3A	; 58
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea e3       	ldi	r30, 0x3A	; 58
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_SetPinDirection+0xb6>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_SetPinDirection+0xb2>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	6a c1       	rjmp	.+724    	; 0x1254 <DIO_SetPinDirection+0x394>
			break;
		case INPULLUP:
			CLR_BIT(DDRA,pin);
     f80:	aa e3       	ldi	r26, 0x3A	; 58
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e3       	ldi	r30, 0x3A	; 58
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_SetPinDirection+0xdc>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	2a 95       	dec	r18
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_SetPinDirection+0xd8>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
			SET_BIT(PORTA,pin);
     fa6:	ab e3       	ldi	r26, 0x3B	; 59
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	eb e3       	ldi	r30, 0x3B	; 59
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_SetPinDirection+0x104>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_SetPinDirection+0x100>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	43 c1       	rjmp	.+646    	; 0x1254 <DIO_SetPinDirection+0x394>
			break;
		case INFREE:
			// code here .....
			CLR_BIT(DDRA,pin);
     fce:	aa e3       	ldi	r26, 0x3A	; 58
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ea e3       	ldi	r30, 0x3A	; 58
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_SetPinDirection+0x12c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_SetPinDirection+0x128>
     ff0:	80 95       	com	r24
     ff2:	84 23       	and	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	2e c1       	rjmp	.+604    	; 0x1254 <DIO_SetPinDirection+0x394>
			break;

		}
       break;
	case PB:
		switch(dir){
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3a 87       	std	Y+10, r19	; 0x0a
    1000:	29 87       	std	Y+9, r18	; 0x09
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	9a 85       	ldd	r25, Y+10	; 0x0a
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_SetPinDirection+0x14e>
    100c:	45 c0       	rjmp	.+138    	; 0x1098 <DIO_SetPinDirection+0x1d8>
    100e:	29 85       	ldd	r18, Y+9	; 0x09
    1010:	3a 85       	ldd	r19, Y+10	; 0x0a
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	c9 f0       	breq	.+50     	; 0x104a <DIO_SetPinDirection+0x18a>
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	09 f0       	breq	.+2      	; 0x1022 <DIO_SetPinDirection+0x162>
    1020:	19 c1       	rjmp	.+562    	; 0x1254 <DIO_SetPinDirection+0x394>
				case OUT:
					SET_BIT(DDRB,pin);
    1022:	a7 e3       	ldi	r26, 0x37	; 55
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e3       	ldi	r30, 0x37	; 55
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_SetPinDirection+0x180>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_SetPinDirection+0x17c>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	05 c1       	rjmp	.+522    	; 0x1254 <DIO_SetPinDirection+0x394>
					break;
				case INPULLUP:
					CLR_BIT(DDRB,pin);
    104a:	a7 e3       	ldi	r26, 0x37	; 55
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e7 e3       	ldi	r30, 0x37	; 55
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_SetPinDirection+0x1a6>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	2a 95       	dec	r18
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_SetPinDirection+0x1a2>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
					SET_BIT(PORTB,pin);
    1070:	a8 e3       	ldi	r26, 0x38	; 56
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e8 e3       	ldi	r30, 0x38	; 56
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_SetPinDirection+0x1ce>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_SetPinDirection+0x1ca>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	de c0       	rjmp	.+444    	; 0x1254 <DIO_SetPinDirection+0x394>
					break;
				case INFREE:
					// code here .....
					CLR_BIT(DDRB,pin);
    1098:	a7 e3       	ldi	r26, 0x37	; 55
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e3       	ldi	r30, 0x37	; 55
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_SetPinDirection+0x1f6>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_SetPinDirection+0x1f2>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	c9 c0       	rjmp	.+402    	; 0x1254 <DIO_SetPinDirection+0x394>

				}
		break;

	case PC:
		switch(dir){
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	38 87       	std	Y+8, r19	; 0x08
    10ca:	2f 83       	std	Y+7, r18	; 0x07
    10cc:	8f 81       	ldd	r24, Y+7	; 0x07
    10ce:	98 85       	ldd	r25, Y+8	; 0x08
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <DIO_SetPinDirection+0x218>
    10d6:	45 c0       	rjmp	.+138    	; 0x1162 <DIO_SetPinDirection+0x2a2>
    10d8:	2f 81       	ldd	r18, Y+7	; 0x07
    10da:	38 85       	ldd	r19, Y+8	; 0x08
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	c9 f0       	breq	.+50     	; 0x1114 <DIO_SetPinDirection+0x254>
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	09 f0       	breq	.+2      	; 0x10ec <DIO_SetPinDirection+0x22c>
    10ea:	b4 c0       	rjmp	.+360    	; 0x1254 <DIO_SetPinDirection+0x394>
				case OUT:
					SET_BIT(DDRC,pin);
    10ec:	a4 e3       	ldi	r26, 0x34	; 52
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e4 e3       	ldi	r30, 0x34	; 52
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_SetPinDirection+0x24a>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_SetPinDirection+0x246>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	a0 c0       	rjmp	.+320    	; 0x1254 <DIO_SetPinDirection+0x394>
					break;
				case INPULLUP:
					CLR_BIT(DDRC,pin);
    1114:	a4 e3       	ldi	r26, 0x34	; 52
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e4 e3       	ldi	r30, 0x34	; 52
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_SetPinDirection+0x270>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	2a 95       	dec	r18
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_SetPinDirection+0x26c>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
					SET_BIT(PORTC,pin);
    113a:	a5 e3       	ldi	r26, 0x35	; 53
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e3       	ldi	r30, 0x35	; 53
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_SetPinDirection+0x298>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_SetPinDirection+0x294>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	79 c0       	rjmp	.+242    	; 0x1254 <DIO_SetPinDirection+0x394>
					break;
				case INFREE:
					// code here .....
					CLR_BIT(DDRC,pin);
    1162:	a4 e3       	ldi	r26, 0x34	; 52
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e4 e3       	ldi	r30, 0x34	; 52
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_SetPinDirection+0x2c0>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_SetPinDirection+0x2bc>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	64 c0       	rjmp	.+200    	; 0x1254 <DIO_SetPinDirection+0x394>
					break;

				}
		break;
	case PD:
		switch(dir){
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3e 83       	std	Y+6, r19	; 0x06
    1194:	2d 83       	std	Y+5, r18	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <DIO_SetPinDirection+0x2e2>
    11a0:	45 c0       	rjmp	.+138    	; 0x122c <DIO_SetPinDirection+0x36c>
    11a2:	2d 81       	ldd	r18, Y+5	; 0x05
    11a4:	3e 81       	ldd	r19, Y+6	; 0x06
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	c9 f0       	breq	.+50     	; 0x11de <DIO_SetPinDirection+0x31e>
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <DIO_SetPinDirection+0x2f6>
    11b4:	4f c0       	rjmp	.+158    	; 0x1254 <DIO_SetPinDirection+0x394>
				case OUT:
					SET_BIT(DDRD,pin);
    11b6:	a1 e3       	ldi	r26, 0x31	; 49
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_SetPinDirection+0x314>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_SetPinDirection+0x310>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	3b c0       	rjmp	.+118    	; 0x1254 <DIO_SetPinDirection+0x394>
					break;
				case INPULLUP:
					CLR_BIT(DDRD,pin);
    11de:	a1 e3       	ldi	r26, 0x31	; 49
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e1 e3       	ldi	r30, 0x31	; 49
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_SetPinDirection+0x33a>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	2a 95       	dec	r18
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_SetPinDirection+0x336>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
					SET_BIT(PORTD,pin);
    1204:	a2 e3       	ldi	r26, 0x32	; 50
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e2 e3       	ldi	r30, 0x32	; 50
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_SetPinDirection+0x362>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_SetPinDirection+0x35e>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <DIO_SetPinDirection+0x394>
					break;
				case INFREE:
					// code here .....
					CLR_BIT(DDRD,pin);
    122c:	a1 e3       	ldi	r26, 0x31	; 49
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e1 e3       	ldi	r30, 0x31	; 49
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_SetPinDirection+0x38a>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_SetPinDirection+0x386>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
					break;

				}
		break;
		}
	return OK;
    1254:	1c 82       	std	Y+4, r1	; 0x04
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_SetPinDirection+0x39c>

}	else {
	return NOK;
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
}

}
    125e:	2e 96       	adiw	r28, 0x0e	; 14
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <DIO_SetPortDirection>:
// function set whole port.
DIOStatus_t DIO_SetPortDirection(DIOPortID_t port,uint8 mask){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <DIO_SetPortDirection+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <DIO_SetPortDirection+0x8>
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	6a 83       	std	Y+2, r22	; 0x02
if(port <= PD){
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	a0 f5       	brcc	.+104    	; 0x12f0 <DIO_SetPortDirection+0x80>
	switch(port){
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	91 05       	cpc	r25, r1
    129a:	d1 f0       	breq	.+52     	; 0x12d0 <DIO_SetPortDirection+0x60>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	22 30       	cpi	r18, 0x02	; 2
    12a2:	31 05       	cpc	r19, r1
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <DIO_SetPortDirection+0x40>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	61 f0       	breq	.+24     	; 0x12c6 <DIO_SetPortDirection+0x56>
    12ae:	1e c0       	rjmp	.+60     	; 0x12ec <DIO_SetPortDirection+0x7c>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	81 f0       	breq	.+32     	; 0x12da <DIO_SetPortDirection+0x6a>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	81 f0       	breq	.+32     	; 0x12e4 <DIO_SetPortDirection+0x74>
    12c4:	13 c0       	rjmp	.+38     	; 0x12ec <DIO_SetPortDirection+0x7c>
	case PA:
		DDRA = mask;
    12c6:	ea e3       	ldi	r30, 0x3A	; 58
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	80 83       	st	Z, r24
    12ce:	0e c0       	rjmp	.+28     	; 0x12ec <DIO_SetPortDirection+0x7c>
		break;
	case PB:
		DDRB = mask;
    12d0:	e7 e3       	ldi	r30, 0x37	; 55
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	80 83       	st	Z, r24
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <DIO_SetPortDirection+0x7c>
		break;
	case PC:
		DDRC = mask;
    12da:	e4 e3       	ldi	r30, 0x34	; 52
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	80 83       	st	Z, r24
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <DIO_SetPortDirection+0x7c>
		break;
	case PD:
		DDRD = mask;
    12e4:	e1 e3       	ldi	r30, 0x31	; 49
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	80 83       	st	Z, r24
		break;
	}
	return OK;
    12ec:	1b 82       	std	Y+3, r1	; 0x03
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_SetPortDirection+0x84>
}
else {
	return NOK;
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
 }

}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_WritePin>:
void DIO_WritePin(DIOPortID_t port,DIOPinID_t pin,uint8 value ){
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <DIO_WritePin+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <DIO_WritePin+0x8>
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	6a 83       	std	Y+2, r22	; 0x02
    1318:	4b 83       	std	Y+3, r20	; 0x03
	if(port <= PD  && pin <= Pin7){
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	08 f0       	brcs	.+2      	; 0x1322 <DIO_WritePin+0x1c>
    1320:	d5 c0       	rjmp	.+426    	; 0x14cc <DIO_WritePin+0x1c6>
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	88 30       	cpi	r24, 0x08	; 8
    1326:	08 f0       	brcs	.+2      	; 0x132a <DIO_WritePin+0x24>
    1328:	d1 c0       	rjmp	.+418    	; 0x14cc <DIO_WritePin+0x1c6>
		switch(port){
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3d 83       	std	Y+5, r19	; 0x05
    1332:	2c 83       	std	Y+4, r18	; 0x04
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 05       	cpc	r25, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <DIO_WritePin+0x3a>
    133e:	43 c0       	rjmp	.+134    	; 0x13c6 <DIO_WritePin+0xc0>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	2c f4       	brge	.+10     	; 0x1354 <DIO_WritePin+0x4e>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	71 f0       	breq	.+28     	; 0x136e <DIO_WritePin+0x68>
    1352:	bc c0       	rjmp	.+376    	; 0x14cc <DIO_WritePin+0x1c6>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <DIO_WritePin+0x5a>
    135e:	5f c0       	rjmp	.+190    	; 0x141e <DIO_WritePin+0x118>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	09 f4       	brne	.+2      	; 0x136c <DIO_WritePin+0x66>
    136a:	85 c0       	rjmp	.+266    	; 0x1476 <DIO_WritePin+0x170>
    136c:	af c0       	rjmp	.+350    	; 0x14cc <DIO_WritePin+0x1c6>
		case PA:
			if(HIGH == value){
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	a1 f4       	brne	.+40     	; 0x139c <DIO_WritePin+0x96>
				SET_BIT(PORTA,pin);
    1374:	ab e3       	ldi	r26, 0x3B	; 59
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	eb e3       	ldi	r30, 0x3B	; 59
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_WritePin+0x8c>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_WritePin+0x88>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	98 c0       	rjmp	.+304    	; 0x14cc <DIO_WritePin+0x1c6>
			}else {
				CLR_BIT(PORTA,pin);
    139c:	ab e3       	ldi	r26, 0x3B	; 59
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_WritePin+0xb4>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_WritePin+0xb0>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	83 c0       	rjmp	.+262    	; 0x14cc <DIO_WritePin+0x1c6>
			}
			break;
		case PB:
			if(HIGH == value){
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	a1 f4       	brne	.+40     	; 0x13f4 <DIO_WritePin+0xee>
							SET_BIT(PORTB,pin);
    13cc:	a8 e3       	ldi	r26, 0x38	; 56
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e8 e3       	ldi	r30, 0x38	; 56
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_WritePin+0xe4>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_WritePin+0xe0>
    13ee:	84 2b       	or	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	6c c0       	rjmp	.+216    	; 0x14cc <DIO_WritePin+0x1c6>
						}else {
							CLR_BIT(PORTB,pin);
    13f4:	a8 e3       	ldi	r26, 0x38	; 56
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_WritePin+0x10c>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_WritePin+0x108>
    1416:	80 95       	com	r24
    1418:	84 23       	and	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	57 c0       	rjmp	.+174    	; 0x14cc <DIO_WritePin+0x1c6>
						}
			break;

		case PC:
			if(HIGH == value){
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	a1 f4       	brne	.+40     	; 0x144c <DIO_WritePin+0x146>
							SET_BIT(PORTC,pin);
    1424:	a5 e3       	ldi	r26, 0x35	; 53
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e5 e3       	ldi	r30, 0x35	; 53
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_WritePin+0x13c>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_WritePin+0x138>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	40 c0       	rjmp	.+128    	; 0x14cc <DIO_WritePin+0x1c6>
						}else {
							CLR_BIT(PORTC,pin);
    144c:	a5 e3       	ldi	r26, 0x35	; 53
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e5 e3       	ldi	r30, 0x35	; 53
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_WritePin+0x164>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_WritePin+0x160>
    146e:	80 95       	com	r24
    1470:	84 23       	and	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	2b c0       	rjmp	.+86     	; 0x14cc <DIO_WritePin+0x1c6>
						}
			break;

		case PD:
			if(HIGH == value){
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	a1 f4       	brne	.+40     	; 0x14a4 <DIO_WritePin+0x19e>
							SET_BIT(PORTD,pin);
    147c:	a2 e3       	ldi	r26, 0x32	; 50
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e2 e3       	ldi	r30, 0x32	; 50
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_WritePin+0x194>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_WritePin+0x190>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	14 c0       	rjmp	.+40     	; 0x14cc <DIO_WritePin+0x1c6>
						}else {
							CLR_BIT(PORTD,pin);
    14a4:	a2 e3       	ldi	r26, 0x32	; 50
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e2 e3       	ldi	r30, 0x32	; 50
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_WritePin+0x1bc>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_WritePin+0x1b8>
    14c6:	80 95       	com	r24
    14c8:	84 23       	and	r24, r20
    14ca:	8c 93       	st	X, r24
						}
			break;

		}
	}
}
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <DIO_WritePort>:
void DIO_WritePort(DIOPortID_t port,uint8 mask){
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_WritePort+0x6>
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <DIO_WritePort+0x8>
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	6a 83       	std	Y+2, r22	; 0x02
	if(port <=PD){
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	84 30       	cpi	r24, 0x04	; 4
    14f0:	90 f5       	brcc	.+100    	; 0x1556 <DIO_WritePort+0x7a>
		switch(port){
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3c 83       	std	Y+4, r19	; 0x04
    14fa:	2b 83       	std	Y+3, r18	; 0x03
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	d1 f0       	breq	.+52     	; 0x153a <DIO_WritePort+0x5e>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_WritePort+0x3e>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_WritePort+0x54>
    1518:	1e c0       	rjmp	.+60     	; 0x1556 <DIO_WritePort+0x7a>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	81 f0       	breq	.+32     	; 0x1544 <DIO_WritePort+0x68>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	81 f0       	breq	.+32     	; 0x154e <DIO_WritePort+0x72>
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <DIO_WritePort+0x7a>
		case PA:
			PORTA = mask;
    1530:	eb e3       	ldi	r30, 0x3B	; 59
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	80 83       	st	Z, r24
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <DIO_WritePort+0x7a>
			break;
		case PB:
					PORTB = mask;
    153a:	e8 e3       	ldi	r30, 0x38	; 56
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <DIO_WritePort+0x7a>
					break;
		case PC:
					PORTC = mask;
    1544:	e5 e3       	ldi	r30, 0x35	; 53
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <DIO_WritePort+0x7a>
					break;
		case PD:
					PORTD = mask;
    154e:	e2 e3       	ldi	r30, 0x32	; 50
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
					break;

		}
	}
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <DIO_ReadPin>:
uint8 DIO_ReadPin(DIOPortID_t port , DIOPinID_t pin){
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <DIO_ReadPin+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <DIO_ReadPin+0x8>
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_ReadPin+0xa>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	6b 83       	std	Y+3, r22	; 0x03
	uint8 v = 0;
    1576:	19 82       	std	Y+1, r1	; 0x01
	if(port<= PD && pin <= Pin7){
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	08 f0       	brcs	.+2      	; 0x1580 <DIO_ReadPin+0x1c>
    157e:	a0 c0       	rjmp	.+320    	; 0x16c0 <DIO_ReadPin+0x15c>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	88 30       	cpi	r24, 0x08	; 8
    1584:	08 f0       	brcs	.+2      	; 0x1588 <DIO_ReadPin+0x24>
    1586:	9c c0       	rjmp	.+312    	; 0x16c0 <DIO_ReadPin+0x15c>
		switch(port){
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3e 83       	std	Y+6, r19	; 0x06
    1590:	2d 83       	std	Y+5, r18	; 0x05
    1592:	4d 81       	ldd	r20, Y+5	; 0x05
    1594:	5e 81       	ldd	r21, Y+6	; 0x06
    1596:	41 30       	cpi	r20, 0x01	; 1
    1598:	51 05       	cpc	r21, r1
    159a:	b1 f1       	breq	.+108    	; 0x1608 <DIO_ReadPin+0xa4>
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	34 f4       	brge	.+12     	; 0x15b2 <DIO_ReadPin+0x4e>
    15a6:	2d 81       	ldd	r18, Y+5	; 0x05
    15a8:	3e 81       	ldd	r19, Y+6	; 0x06
    15aa:	21 15       	cp	r18, r1
    15ac:	31 05       	cpc	r19, r1
    15ae:	71 f0       	breq	.+28     	; 0x15cc <DIO_ReadPin+0x68>
    15b0:	84 c0       	rjmp	.+264    	; 0x16ba <DIO_ReadPin+0x156>
    15b2:	4d 81       	ldd	r20, Y+5	; 0x05
    15b4:	5e 81       	ldd	r21, Y+6	; 0x06
    15b6:	42 30       	cpi	r20, 0x02	; 2
    15b8:	51 05       	cpc	r21, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <DIO_ReadPin+0x5a>
    15bc:	43 c0       	rjmp	.+134    	; 0x1644 <DIO_ReadPin+0xe0>
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <DIO_ReadPin+0x66>
    15c8:	5b c0       	rjmp	.+182    	; 0x1680 <DIO_ReadPin+0x11c>
    15ca:	77 c0       	rjmp	.+238    	; 0x16ba <DIO_ReadPin+0x156>
		case PA:
			v =  GET_BIT(PINA,pin);
    15cc:	e9 e3       	ldi	r30, 0x39	; 57
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_ReadPin+0x82>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	2a 95       	dec	r18
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_ReadPin+0x7e>
    15ea:	9a 01       	movw	r18, r20
    15ec:	28 23       	and	r18, r24
    15ee:	39 23       	and	r19, r25
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a9 01       	movw	r20, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_ReadPin+0x9a>
    15fa:	55 95       	asr	r21
    15fc:	47 95       	ror	r20
    15fe:	8a 95       	dec	r24
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_ReadPin+0x96>
    1602:	ca 01       	movw	r24, r20
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	59 c0       	rjmp	.+178    	; 0x16ba <DIO_ReadPin+0x156>
			break;
		case PB:
		v =  GET_BIT(PINB,pin);
    1608:	e6 e3       	ldi	r30, 0x36	; 54
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_ReadPin+0xbe>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	2a 95       	dec	r18
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_ReadPin+0xba>
    1626:	9a 01       	movw	r18, r20
    1628:	28 23       	and	r18, r24
    162a:	39 23       	and	r19, r25
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	88 2f       	mov	r24, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a9 01       	movw	r20, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <DIO_ReadPin+0xd6>
    1636:	55 95       	asr	r21
    1638:	47 95       	ror	r20
    163a:	8a 95       	dec	r24
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <DIO_ReadPin+0xd2>
    163e:	ca 01       	movw	r24, r20
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	3b c0       	rjmp	.+118    	; 0x16ba <DIO_ReadPin+0x156>
		break;
		case PC:
			v =  GET_BIT(PINC,pin);
    1644:	e3 e3       	ldi	r30, 0x33	; 51
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_ReadPin+0xfa>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	2a 95       	dec	r18
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_ReadPin+0xf6>
    1662:	9a 01       	movw	r18, r20
    1664:	28 23       	and	r18, r24
    1666:	39 23       	and	r19, r25
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	88 2f       	mov	r24, r24
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a9 01       	movw	r20, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_ReadPin+0x112>
    1672:	55 95       	asr	r21
    1674:	47 95       	ror	r20
    1676:	8a 95       	dec	r24
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_ReadPin+0x10e>
    167a:	ca 01       	movw	r24, r20
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	1d c0       	rjmp	.+58     	; 0x16ba <DIO_ReadPin+0x156>
					break;
		case PD:
			v = GET_BIT(PIND,pin);
    1680:	e0 e3       	ldi	r30, 0x30	; 48
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_ReadPin+0x136>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	2a 95       	dec	r18
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_ReadPin+0x132>
    169e:	9a 01       	movw	r18, r20
    16a0:	28 23       	and	r18, r24
    16a2:	39 23       	and	r19, r25
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a9 01       	movw	r20, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_ReadPin+0x14e>
    16ae:	55 95       	asr	r21
    16b0:	47 95       	ror	r20
    16b2:	8a 95       	dec	r24
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_ReadPin+0x14a>
    16b6:	ca 01       	movw	r24, r20
    16b8:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
		return v;
    16ba:	59 81       	ldd	r21, Y+1	; 0x01
    16bc:	5c 83       	std	Y+4, r21	; 0x04
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <DIO_ReadPin+0x15e>

	}
	else {
		return 0;
    16c0:	1c 82       	std	Y+4, r1	; 0x04
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    16c4:	26 96       	adiw	r28, 0x06	; 6
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <DIO_ReadPort>:
uint8 DIO_ReadPort(DIOPortID_t port){
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <DIO_ReadPort+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <DIO_ReadPort+0x8>
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	8a 83       	std	Y+2, r24	; 0x02
	if(port<= PD){
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	84 30       	cpi	r24, 0x04	; 4
    16ea:	b0 f5       	brcc	.+108    	; 0x1758 <DIO_ReadPort+0x82>
		uint8 mask=0;
    16ec:	19 82       	std	Y+1, r1	; 0x01
		switch(port){
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3d 83       	std	Y+5, r19	; 0x05
    16f6:	2c 83       	std	Y+4, r18	; 0x04
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	91 05       	cpc	r25, r1
    1700:	d1 f0       	breq	.+52     	; 0x1736 <DIO_ReadPort+0x60>
    1702:	2c 81       	ldd	r18, Y+4	; 0x04
    1704:	3d 81       	ldd	r19, Y+5	; 0x05
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	2c f4       	brge	.+10     	; 0x1716 <DIO_ReadPort+0x40>
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	61 f0       	breq	.+24     	; 0x172c <DIO_ReadPort+0x56>
    1714:	1e c0       	rjmp	.+60     	; 0x1752 <DIO_ReadPort+0x7c>
    1716:	2c 81       	ldd	r18, Y+4	; 0x04
    1718:	3d 81       	ldd	r19, Y+5	; 0x05
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	81 f0       	breq	.+32     	; 0x1740 <DIO_ReadPort+0x6a>
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	91 05       	cpc	r25, r1
    1728:	81 f0       	breq	.+32     	; 0x174a <DIO_ReadPort+0x74>
    172a:	13 c0       	rjmp	.+38     	; 0x1752 <DIO_ReadPort+0x7c>
		case PA:
			mask = PINA;
    172c:	e9 e3       	ldi	r30, 0x39	; 57
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	0e c0       	rjmp	.+28     	; 0x1752 <DIO_ReadPort+0x7c>
			break;
		case PB:
					mask = PINB;
    1736:	e6 e3       	ldi	r30, 0x36	; 54
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	09 c0       	rjmp	.+18     	; 0x1752 <DIO_ReadPort+0x7c>
					break;
		case PC:
					mask = PINC;
    1740:	e3 e3       	ldi	r30, 0x33	; 51
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <DIO_ReadPort+0x7c>
					break;
		case PD:
					mask = PIND;
    174a:	e0 e3       	ldi	r30, 0x30	; 48
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
		return mask;
    1752:	99 81       	ldd	r25, Y+1	; 0x01
    1754:	9b 83       	std	Y+3, r25	; 0x03
    1756:	01 c0       	rjmp	.+2      	; 0x175a <DIO_ReadPort+0x84>

	}else {
		return 0;
    1758:	1b 82       	std	Y+3, r1	; 0x03
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <LCD_Init>:
#include"STD.h"
#include"LCD_CFG.h"
#include"DIO.h"


LCD_STATUS LCD_Init(){
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	cd 54       	subi	r28, 0x4D	; 77
    177a:	d0 40       	sbci	r29, 0x00	; 0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61

	LCD_STATUS status = _NOK;
    1786:	fe 01       	movw	r30, r28
    1788:	e3 5b       	subi	r30, 0xB3	; 179
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	80 83       	st	Z, r24
// set direction output for [ CONTROL PINS & DATA PINS ]
	DIO_SetPinDirection(LCD_CONTROL_PORT,LCD_RS,OUT);
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CONTROL_PORT,LCD_RW,OUT);
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CONTROL_PORT,LCD_E,OUT);
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	62 e0       	ldi	r22, 0x02	; 2
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_SetPinDirection>
	// Set Direction for Data port
	DIO_SetPortDirection(LCD_DATA_PORT,0xff);
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_SetPortDirection>
    17b6:	fe 01       	movw	r30, r28
    17b8:	e7 5b       	subi	r30, 0xB7	; 183
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a0 e2       	ldi	r26, 0x20	; 32
    17c2:	b2 e4       	ldi	r27, 0x42	; 66
    17c4:	80 83       	st	Z, r24
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	a2 83       	std	Z+2, r26	; 0x02
    17ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17cc:	8e 01       	movw	r16, r28
    17ce:	0b 5b       	subi	r16, 0xBB	; 187
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	fe 01       	movw	r30, r28
    17d4:	e7 5b       	subi	r30, 0xB7	; 183
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4a ef       	ldi	r20, 0xFA	; 250
    17e6:	54 e4       	ldi	r21, 0x44	; 68
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	f8 01       	movw	r30, r16
    17f2:	80 83       	st	Z, r24
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	a2 83       	std	Z+2, r26	; 0x02
    17f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17fa:	fe 01       	movw	r30, r28
    17fc:	eb 5b       	subi	r30, 0xBB	; 187
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	44 f4       	brge	.+16     	; 0x1828 <LCD_Init+0xbc>
		__ticks = 1;
    1818:	fe 01       	movw	r30, r28
    181a:	ed 5b       	subi	r30, 0xBD	; 189
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    1826:	64 c0       	rjmp	.+200    	; 0x18f0 <LCD_Init+0x184>
	else if (__tmp > 65535)
    1828:	fe 01       	movw	r30, r28
    182a:	eb 5b       	subi	r30, 0xBB	; 187
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	0c f0       	brlt	.+2      	; 0x1848 <LCD_Init+0xdc>
    1846:	43 c0       	rjmp	.+134    	; 0x18ce <LCD_Init+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	fe 01       	movw	r30, r28
    184a:	e7 5b       	subi	r30, 0xB7	; 183
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e2       	ldi	r20, 0x20	; 32
    185c:	51 e4       	ldi	r21, 0x41	; 65
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	8e 01       	movw	r16, r28
    1868:	0d 5b       	subi	r16, 0xBD	; 189
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	f8 01       	movw	r30, r16
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
    187e:	1f c0       	rjmp	.+62     	; 0x18be <LCD_Init+0x152>
    1880:	fe 01       	movw	r30, r28
    1882:	ef 5b       	subi	r30, 0xBF	; 191
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	88 ec       	ldi	r24, 0xC8	; 200
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    188e:	fe 01       	movw	r30, r28
    1890:	ef 5b       	subi	r30, 0xBF	; 191
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_Init+0x12c>
    189c:	fe 01       	movw	r30, r28
    189e:	ef 5b       	subi	r30, 0xBF	; 191
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a6:	de 01       	movw	r26, r28
    18a8:	ad 5b       	subi	r26, 0xBD	; 189
    18aa:	bf 4f       	sbci	r27, 0xFF	; 255
    18ac:	fe 01       	movw	r30, r28
    18ae:	ed 5b       	subi	r30, 0xBD	; 189
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	91 81       	ldd	r25, Z+1	; 0x01
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	11 96       	adiw	r26, 0x01	; 1
    18ba:	9c 93       	st	X, r25
    18bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	fe 01       	movw	r30, r28
    18c0:	ed 5b       	subi	r30, 0xBD	; 189
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	d1 f6       	brne	.-76     	; 0x1880 <LCD_Init+0x114>
    18cc:	24 c0       	rjmp	.+72     	; 0x1916 <LCD_Init+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ce:	8e 01       	movw	r16, r28
    18d0:	0d 5b       	subi	r16, 0xBD	; 189
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	eb 5b       	subi	r30, 0xBB	; 187
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	f8 01       	movw	r30, r16
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
    18f0:	fe 01       	movw	r30, r28
    18f2:	ed 5b       	subi	r30, 0xBD	; 189
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	fe 01       	movw	r30, r28
    18fc:	ff 96       	adiw	r30, 0x3f	; 63
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	fe 01       	movw	r30, r28
    1904:	ff 96       	adiw	r30, 0x3f	; 63
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_Init+0x19e>
    190e:	fe 01       	movw	r30, r28
    1910:	ff 96       	adiw	r30, 0x3f	; 63
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
	_delay_ms(40);
	LCD_SendCmd(CMD_FUNCTION_SET_CMD);
    1916:	88 e3       	ldi	r24, 0x38	; 56
    1918:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 e2       	ldi	r26, 0x20	; 32
    1922:	b2 e4       	ldi	r27, 0x42	; 66
    1924:	8b af       	std	Y+59, r24	; 0x3b
    1926:	9c af       	std	Y+60, r25	; 0x3c
    1928:	ad af       	std	Y+61, r26	; 0x3d
    192a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    192c:	6b ad       	ldd	r22, Y+59	; 0x3b
    192e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1930:	8d ad       	ldd	r24, Y+61	; 0x3d
    1932:	9e ad       	ldd	r25, Y+62	; 0x3e
    1934:	2b ea       	ldi	r18, 0xAB	; 171
    1936:	3a ea       	ldi	r19, 0xAA	; 170
    1938:	4a e2       	ldi	r20, 0x2A	; 42
    193a:	50 e4       	ldi	r21, 0x40	; 64
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	8f ab       	std	Y+55, r24	; 0x37
    1946:	98 af       	std	Y+56, r25	; 0x38
    1948:	a9 af       	std	Y+57, r26	; 0x39
    194a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    194c:	6f a9       	ldd	r22, Y+55	; 0x37
    194e:	78 ad       	ldd	r23, Y+56	; 0x38
    1950:	89 ad       	ldd	r24, Y+57	; 0x39
    1952:	9a ad       	ldd	r25, Y+58	; 0x3a
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1960:	88 23       	and	r24, r24
    1962:	1c f4       	brge	.+6      	; 0x196a <LCD_Init+0x1fe>
		__ticks = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	8e ab       	std	Y+54, r24	; 0x36
    1968:	91 c0       	rjmp	.+290    	; 0x1a8c <LCD_Init+0x320>
	else if (__tmp > 255)
    196a:	6f a9       	ldd	r22, Y+55	; 0x37
    196c:	78 ad       	ldd	r23, Y+56	; 0x38
    196e:	89 ad       	ldd	r24, Y+57	; 0x39
    1970:	9a ad       	ldd	r25, Y+58	; 0x3a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4f e7       	ldi	r20, 0x7F	; 127
    1978:	53 e4       	ldi	r21, 0x43	; 67
    197a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    197e:	18 16       	cp	r1, r24
    1980:	0c f0       	brlt	.+2      	; 0x1984 <LCD_Init+0x218>
    1982:	7b c0       	rjmp	.+246    	; 0x1a7a <LCD_Init+0x30e>
	{
		_delay_ms(__us / 1000.0);
    1984:	6b ad       	ldd	r22, Y+59	; 0x3b
    1986:	7c ad       	ldd	r23, Y+60	; 0x3c
    1988:	8d ad       	ldd	r24, Y+61	; 0x3d
    198a:	9e ad       	ldd	r25, Y+62	; 0x3e
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a e7       	ldi	r20, 0x7A	; 122
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8a ab       	std	Y+50, r24	; 0x32
    199e:	9b ab       	std	Y+51, r25	; 0x33
    19a0:	ac ab       	std	Y+52, r26	; 0x34
    19a2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	6a a9       	ldd	r22, Y+50	; 0x32
    19a6:	7b a9       	ldd	r23, Y+51	; 0x33
    19a8:	8c a9       	ldd	r24, Y+52	; 0x34
    19aa:	9d a9       	ldd	r25, Y+53	; 0x35
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a ef       	ldi	r20, 0xFA	; 250
    19b2:	54 e4       	ldi	r21, 0x44	; 68
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8e a7       	std	Y+46, r24	; 0x2e
    19be:	9f a7       	std	Y+47, r25	; 0x2f
    19c0:	a8 ab       	std	Y+48, r26	; 0x30
    19c2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19c4:	6e a5       	ldd	r22, Y+46	; 0x2e
    19c6:	7f a5       	ldd	r23, Y+47	; 0x2f
    19c8:	88 a9       	ldd	r24, Y+48	; 0x30
    19ca:	99 a9       	ldd	r25, Y+49	; 0x31
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_Init+0x27a>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9d a7       	std	Y+45, r25	; 0x2d
    19e2:	8c a7       	std	Y+44, r24	; 0x2c
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_Init+0x2f8>
	else if (__tmp > 65535)
    19e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    19e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    19ea:	88 a9       	ldd	r24, Y+48	; 0x30
    19ec:	99 a9       	ldd	r25, Y+49	; 0x31
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_Init+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	6a a9       	ldd	r22, Y+50	; 0x32
    1a00:	7b a9       	ldd	r23, Y+51	; 0x33
    1a02:	8c a9       	ldd	r24, Y+52	; 0x34
    1a04:	9d a9       	ldd	r25, Y+53	; 0x35
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9d a7       	std	Y+45, r25	; 0x2d
    1a24:	8c a7       	std	Y+44, r24	; 0x2c
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_Init+0x2da>
    1a28:	88 ec       	ldi	r24, 0xC8	; 200
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9b a7       	std	Y+43, r25	; 0x2b
    1a2e:	8a a7       	std	Y+42, r24	; 0x2a
    1a30:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a32:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_Init+0x2c8>
    1a38:	9b a7       	std	Y+43, r25	; 0x2b
    1a3a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9d a7       	std	Y+45, r25	; 0x2d
    1a44:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a48:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_Init+0x2bc>
    1a4e:	24 c0       	rjmp	.+72     	; 0x1a98 <LCD_Init+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a52:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a54:	88 a9       	ldd	r24, Y+48	; 0x30
    1a56:	99 a9       	ldd	r25, Y+49	; 0x31
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9d a7       	std	Y+45, r25	; 0x2d
    1a62:	8c a7       	std	Y+44, r24	; 0x2c
    1a64:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a66:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a68:	99 a7       	std	Y+41, r25	; 0x29
    1a6a:	88 a7       	std	Y+40, r24	; 0x28
    1a6c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a6e:	99 a5       	ldd	r25, Y+41	; 0x29
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_Init+0x304>
    1a74:	99 a7       	std	Y+41, r25	; 0x29
    1a76:	88 a7       	std	Y+40, r24	; 0x28
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <LCD_Init+0x32c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a7a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a7c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8e ab       	std	Y+54, r24	; 0x36
    1a8c:	8e a9       	ldd	r24, Y+54	; 0x36
    1a8e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a90:	8f a1       	ldd	r24, Y+39	; 0x27
    1a92:	8a 95       	dec	r24
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_Init+0x326>
    1a96:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_SendCmd(CMD_DISPLAY_ON_CURSOR_OFF);
    1a98:	8c e0       	ldi	r24, 0x0C	; 12
    1a9a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e2       	ldi	r26, 0x20	; 32
    1aa4:	b2 e4       	ldi	r27, 0x42	; 66
    1aa6:	8b a3       	std	Y+35, r24	; 0x23
    1aa8:	9c a3       	std	Y+36, r25	; 0x24
    1aaa:	ad a3       	std	Y+37, r26	; 0x25
    1aac:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aae:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab6:	2b ea       	ldi	r18, 0xAB	; 171
    1ab8:	3a ea       	ldi	r19, 0xAA	; 170
    1aba:	4a e2       	ldi	r20, 0x2A	; 42
    1abc:	50 e4       	ldi	r21, 0x40	; 64
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac8:	98 a3       	std	Y+32, r25	; 0x20
    1aca:	a9 a3       	std	Y+33, r26	; 0x21
    1acc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ace:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ad0:	78 a1       	ldd	r23, Y+32	; 0x20
    1ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	1c f4       	brge	.+6      	; 0x1aec <LCD_Init+0x380>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	8e 8f       	std	Y+30, r24	; 0x1e
    1aea:	91 c0       	rjmp	.+290    	; 0x1c0e <LCD_Init+0x4a2>
	else if (__tmp > 255)
    1aec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1aee:	78 a1       	ldd	r23, Y+32	; 0x20
    1af0:	89 a1       	ldd	r24, Y+33	; 0x21
    1af2:	9a a1       	ldd	r25, Y+34	; 0x22
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	53 e4       	ldi	r21, 0x43	; 67
    1afc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	0c f0       	brlt	.+2      	; 0x1b06 <LCD_Init+0x39a>
    1b04:	7b c0       	rjmp	.+246    	; 0x1bfc <LCD_Init+0x490>
	{
		_delay_ms(__us / 1000.0);
    1b06:	6b a1       	ldd	r22, Y+35	; 0x23
    1b08:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4a e7       	ldi	r20, 0x7A	; 122
    1b14:	54 e4       	ldi	r21, 0x44	; 68
    1b16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8a 8f       	std	Y+26, r24	; 0x1a
    1b20:	9b 8f       	std	Y+27, r25	; 0x1b
    1b22:	ac 8f       	std	Y+28, r26	; 0x1c
    1b24:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b28:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a ef       	ldi	r20, 0xFA	; 250
    1b34:	54 e4       	ldi	r21, 0x44	; 68
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8e 8b       	std	Y+22, r24	; 0x16
    1b40:	9f 8b       	std	Y+23, r25	; 0x17
    1b42:	a8 8f       	std	Y+24, r26	; 0x18
    1b44:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b46:	6e 89       	ldd	r22, Y+22	; 0x16
    1b48:	7f 89       	ldd	r23, Y+23	; 0x17
    1b4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <LCD_Init+0x3fc>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9d 8b       	std	Y+21, r25	; 0x15
    1b64:	8c 8b       	std	Y+20, r24	; 0x14
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <LCD_Init+0x47a>
	else if (__tmp > 65535)
    1b68:	6e 89       	ldd	r22, Y+22	; 0x16
    1b6a:	7f 89       	ldd	r23, Y+23	; 0x17
    1b6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b6e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	4c f5       	brge	.+82     	; 0x1bd2 <LCD_Init+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b82:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9d 8b       	std	Y+21, r25	; 0x15
    1ba6:	8c 8b       	std	Y+20, r24	; 0x14
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <LCD_Init+0x45c>
    1baa:	88 ec       	ldi	r24, 0xC8	; 200
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9b 8b       	std	Y+19, r25	; 0x13
    1bb0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bb2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bb4:	9b 89       	ldd	r25, Y+19	; 0x13
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_Init+0x44a>
    1bba:	9b 8b       	std	Y+19, r25	; 0x13
    1bbc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8c 89       	ldd	r24, Y+20	; 0x14
    1bc0:	9d 89       	ldd	r25, Y+21	; 0x15
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	9d 8b       	std	Y+21, r25	; 0x15
    1bc6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	8c 89       	ldd	r24, Y+20	; 0x14
    1bca:	9d 89       	ldd	r25, Y+21	; 0x15
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f7       	brne	.-38     	; 0x1baa <LCD_Init+0x43e>
    1bd0:	24 c0       	rjmp	.+72     	; 0x1c1a <LCD_Init+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	6e 89       	ldd	r22, Y+22	; 0x16
    1bd4:	7f 89       	ldd	r23, Y+23	; 0x17
    1bd6:	88 8d       	ldd	r24, Y+24	; 0x18
    1bd8:	99 8d       	ldd	r25, Y+25	; 0x19
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9d 8b       	std	Y+21, r25	; 0x15
    1be4:	8c 8b       	std	Y+20, r24	; 0x14
    1be6:	8c 89       	ldd	r24, Y+20	; 0x14
    1be8:	9d 89       	ldd	r25, Y+21	; 0x15
    1bea:	99 8b       	std	Y+17, r25	; 0x11
    1bec:	88 8b       	std	Y+16, r24	; 0x10
    1bee:	88 89       	ldd	r24, Y+16	; 0x10
    1bf0:	99 89       	ldd	r25, Y+17	; 0x11
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_Init+0x486>
    1bf6:	99 8b       	std	Y+17, r25	; 0x11
    1bf8:	88 8b       	std	Y+16, r24	; 0x10
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_Init+0x4ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bfc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bfe:	78 a1       	ldd	r23, Y+32	; 0x20
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c10:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c14:	8a 95       	dec	r24
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_Init+0x4a8>
    1c18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_SendCmd(CMD_DISPLAY_CLEAR);
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 e0       	ldi	r26, 0x00	; 0
    1c26:	b0 e4       	ldi	r27, 0x40	; 64
    1c28:	8b 87       	std	Y+11, r24	; 0x0b
    1c2a:	9c 87       	std	Y+12, r25	; 0x0c
    1c2c:	ad 87       	std	Y+13, r26	; 0x0d
    1c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a ef       	ldi	r20, 0xFA	; 250
    1c3e:	54 e4       	ldi	r21, 0x44	; 68
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8f 83       	std	Y+7, r24	; 0x07
    1c4a:	98 87       	std	Y+8, r25	; 0x08
    1c4c:	a9 87       	std	Y+9, r26	; 0x09
    1c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	78 85       	ldd	r23, Y+8	; 0x08
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <LCD_Init+0x506>
		__ticks = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <LCD_Init+0x584>
	else if (__tmp > 65535)
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	4c f5       	brge	.+82     	; 0x1cdc <LCD_Init+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e2       	ldi	r20, 0x20	; 32
    1c98:	51 e4       	ldi	r21, 0x41	; 65
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <LCD_Init+0x566>
    1cb4:	88 ec       	ldi	r24, 0xC8	; 200
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LCD_Init+0x554>
    1cc4:	9c 83       	std	Y+4, r25	; 0x04
    1cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <LCD_Init+0x548>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <LCD_Init+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <LCD_Init+0x590>
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_SendCmd(CMD_ENTRY_MODE_SET);
    1d04:	86 e0       	ldi	r24, 0x06	; 6
    1d06:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>

// end of initialization.....


	return status;
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e3 5b       	subi	r30, 0xB3	; 179
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z


}
    1d12:	c3 5b       	subi	r28, 0xB3	; 179
    1d14:	df 4f       	sbci	r29, 0xFF	; 255
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	08 95       	ret

00001d2a <LCD_SendCmd>:
LCD_STATUS LCD_SendCmd(uint8 Cmd){
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	60 97       	sbiw	r28, 0x10	; 16
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	88 8b       	std	Y+16, r24	; 0x10
	LCD_STATUS status = 0;
    1d40:	1f 86       	std	Y+15, r1	; 0x0f
	// E = HIGH
	//delay
	//E  = LOW
	// status  = _OK
	if(sizeof(Cmd) == sizeof(uint8)){
		DIO_WritePin(LCD_CONTROL_PORT,LCD_RS,LOW);
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>
		DIO_WritePin(LCD_CONTROL_PORT,LCD_RW,LOW);
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>
		DIO_WritePort(LCD_DATA_PORT,Cmd);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	68 89       	ldd	r22, Y+16	; 0x10
    1d5a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <DIO_WritePort>
		DIO_WritePin(LCD_CONTROL_PORT,LCD_E,HIGH);
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_SendCmd+0x90>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_SendCmd+0x10e>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_SendCmd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_SendCmd+0xf0>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_SendCmd+0xde>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_SendCmd+0xd2>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_SendCmd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_SendCmd+0x11a>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		DIO_WritePin(LCD_CONTROL_PORT,LCD_E,LOW);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	62 e0       	ldi	r22, 0x02	; 2
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>

status = _OK;
    1e56:	1f 86       	std	Y+15, r1	; 0x0f
	}else {
		status = _NOK;
	}
		return status;
    1e58:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1e5a:	60 96       	adiw	r28, 0x10	; 16
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <LCD_SendChar>:
LCD_STATUS LCD_SendChar(uint8 character){
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	60 97       	sbiw	r28, 0x10	; 16
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	88 8b       	std	Y+16, r24	; 0x10
	LCD_STATUS status = 0;
    1e82:	1f 86       	std	Y+15, r1	; 0x0f
			// E = HIGH
			//delay
			//E  = LOW
	// status  = _OK
	if(sizeof(character) == sizeof(uint8)){
			DIO_WritePin(LCD_CONTROL_PORT,LCD_RS,HIGH);
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>
			DIO_WritePin(LCD_CONTROL_PORT,LCD_RW,LOW);
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	61 e0       	ldi	r22, 0x01	; 1
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>
			DIO_WritePort(LCD_DATA_PORT,character);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	68 89       	ldd	r22, Y+16	; 0x10
    1e9c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <DIO_WritePort>
			DIO_WritePin(LCD_CONTROL_PORT,LCD_E,HIGH);
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	62 e0       	ldi	r22, 0x02	; 2
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a0 e8       	ldi	r26, 0x80	; 128
    1eb0:	bf e3       	ldi	r27, 0x3F	; 63
    1eb2:	8b 87       	std	Y+11, r24	; 0x0b
    1eb4:	9c 87       	std	Y+12, r25	; 0x0c
    1eb6:	ad 87       	std	Y+13, r26	; 0x0d
    1eb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4a ef       	ldi	r20, 0xFA	; 250
    1ec8:	54 e4       	ldi	r21, 0x44	; 68
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	8f 83       	std	Y+7, r24	; 0x07
    1ed4:	98 87       	std	Y+8, r25	; 0x08
    1ed6:	a9 87       	std	Y+9, r26	; 0x09
    1ed8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eda:	6f 81       	ldd	r22, Y+7	; 0x07
    1edc:	78 85       	ldd	r23, Y+8	; 0x08
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e8       	ldi	r20, 0x80	; 128
    1ee8:	5f e3       	ldi	r21, 0x3F	; 63
    1eea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eee:	88 23       	and	r24, r24
    1ef0:	2c f4       	brge	.+10     	; 0x1efc <LCD_SendChar+0x90>
		__ticks = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	3f c0       	rjmp	.+126    	; 0x1f7a <LCD_SendChar+0x10e>
	else if (__tmp > 65535)
    1efc:	6f 81       	ldd	r22, Y+7	; 0x07
    1efe:	78 85       	ldd	r23, Y+8	; 0x08
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	3f ef       	ldi	r19, 0xFF	; 255
    1f08:	4f e7       	ldi	r20, 0x7F	; 127
    1f0a:	57 e4       	ldi	r21, 0x47	; 71
    1f0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	4c f5       	brge	.+82     	; 0x1f66 <LCD_SendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e2       	ldi	r20, 0x20	; 32
    1f22:	51 e4       	ldi	r21, 0x41	; 65
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	0f c0       	rjmp	.+30     	; 0x1f5c <LCD_SendChar+0xf0>
    1f3e:	88 ec       	ldi	r24, 0xC8	; 200
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_SendChar+0xde>
    1f4e:	9c 83       	std	Y+4, r25	; 0x04
    1f50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f52:	8d 81       	ldd	r24, Y+5	; 0x05
    1f54:	9e 81       	ldd	r25, Y+6	; 0x06
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	9e 83       	std	Y+6, r25	; 0x06
    1f5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	69 f7       	brne	.-38     	; 0x1f3e <LCD_SendChar+0xd2>
    1f64:	14 c0       	rjmp	.+40     	; 0x1f8e <LCD_SendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f66:	6f 81       	ldd	r22, Y+7	; 0x07
    1f68:	78 85       	ldd	r23, Y+8	; 0x08
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9e 83       	std	Y+6, r25	; 0x06
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_SendChar+0x11a>
    1f8a:	9a 83       	std	Y+2, r25	; 0x02
    1f8c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			DIO_WritePin(LCD_CONTROL_PORT,LCD_E,LOW);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	62 e0       	ldi	r22, 0x02	; 2
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_WritePin>

	status = _OK;
    1f98:	1f 86       	std	Y+15, r1	; 0x0f
		}else {
			status = _NOK;
		}
			return status;
    1f9a:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    1f9c:	60 96       	adiw	r28, 0x10	; 16
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <LCD_IntegerToString>:
void LCD_IntegerToString(uint16 data)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <LCD_IntegerToString+0x6>
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <LCD_IntegerToString+0x8>
    1fb6:	0f 92       	push	r0
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	9d 83       	std	Y+5, r25	; 0x05
    1fbe:	8c 83       	std	Y+4, r24	; 0x04
	char SHOWA [3];
	itoa(data,SHOWA,10);
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	9e 01       	movw	r18, r28
    1fc6:	2f 5f       	subi	r18, 0xFF	; 255
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	b9 01       	movw	r22, r18
    1fcc:	4a e0       	ldi	r20, 0x0A	; 10
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <itoa>
	LCD_send_a_string(SHOWA);
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <LCD_send_a_string>
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <LCD_send_a_string>:
void LCD_send_a_string(char *string_of_characters)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <LCD_send_a_string+0x6>
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	0b c0       	rjmp	.+22     	; 0x2012 <LCD_send_a_string+0x26>
    while(*string_of_characters > 0)
    {
        LCD_SendChar(*string_of_characters++);
    1ffc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    2000:	20 81       	ld	r18, Z
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	82 2f       	mov	r24, r18
    200e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <LCD_SendChar>
	itoa(data,SHOWA,10);
	LCD_send_a_string(SHOWA);
}
void LCD_send_a_string(char *string_of_characters)
{
    while(*string_of_characters > 0)
    2012:	e9 81       	ldd	r30, Y+1	; 0x01
    2014:	fa 81       	ldd	r31, Y+2	; 0x02
    2016:	80 81       	ld	r24, Z
    2018:	88 23       	and	r24, r24
    201a:	81 f7       	brne	.-32     	; 0x1ffc <LCD_send_a_string+0x10>
    {
        LCD_SendChar(*string_of_characters++);
    }
}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <LCD_PutChar_XY>:
LCD_STATUS LCD_PutChar_XY(uint8 Line,uint8 index){
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <LCD_PutChar_XY+0x6>
    202c:	00 d0       	rcall	.+0      	; 0x202e <LCD_PutChar_XY+0x8>
    202e:	0f 92       	push	r0
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	8a 83       	std	Y+2, r24	; 0x02
    2036:	6b 83       	std	Y+3, r22	; 0x03
	LCD_STATUS status = _OK;
    2038:	19 82       	std	Y+1, r1	; 0x01
	switch(Line){
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3d 83       	std	Y+5, r19	; 0x05
    2042:	2c 83       	std	Y+4, r18	; 0x04
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	31 f0       	breq	.+12     	; 0x205a <LCD_PutChar_XY+0x34>
    204e:	2c 81       	ldd	r18, Y+4	; 0x04
    2050:	3d 81       	ldd	r19, Y+5	; 0x05
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	31 05       	cpc	r19, r1
    2056:	31 f0       	breq	.+12     	; 0x2064 <LCD_PutChar_XY+0x3e>
    2058:	0a c0       	rjmp	.+20     	; 0x206e <LCD_PutChar_XY+0x48>
	case 1:
		LCD_SendCmd(FIRST_LINE_ADDRES+(index-1));
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	81 58       	subi	r24, 0x81	; 129
    205e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <LCD_PutChar_XY+0x4a>
		break;
	case 2:

		LCD_SendCmd(SECOND_LINE_ADDRES+(index-1));
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	81 54       	subi	r24, 0x41	; 65
    2068:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <LCD_PutChar_XY+0x4a>
		break;
	default:
		status = _OK;
    206e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return status;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <LCD_ShiftLeft>:
void LCD_ShiftLeft(){
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCmd(SHIFT_LEFT_MASK);
    208a:	88 e1       	ldi	r24, 0x18	; 24
    208c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
}
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <LCD_RightRight>:
void LCD_RightRight(){
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCmd(SHIFT_RIGHT_MASK);
    209e:	8c e1       	ldi	r24, 0x1C	; 28
    20a0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
}
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <LCD_DrawPattern>:

void LCD_DrawPattern(uint8 *p){
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <LCD_DrawPattern+0x6>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LCD_DrawPattern+0x8>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <LCD_DrawPattern+0xa>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
	LCD_SendCmd(FIRST_ADDRESS_CGRAM);
    20bc:	80 e4       	ldi	r24, 0x40	; 64
    20be:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
for(int i =0;i<64;i++){
    20c2:	1c 82       	std	Y+4, r1	; 0x04
    20c4:	1b 82       	std	Y+3, r1	; 0x03
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <LCD_DrawPattern+0x3c>
		LCD_SendChar(p[i]);
    20c8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ca:	3c 81       	ldd	r19, Y+4	; 0x04
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	fc 01       	movw	r30, r24
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	80 81       	ld	r24, Z
    20d8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <LCD_SendChar>
	LCD_SendCmd(SHIFT_RIGHT_MASK);
}

void LCD_DrawPattern(uint8 *p){
	LCD_SendCmd(FIRST_ADDRESS_CGRAM);
for(int i =0;i<64;i++){
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	80 34       	cpi	r24, 0x40	; 64
    20ec:	91 05       	cpc	r25, r1
    20ee:	64 f3       	brlt	.-40     	; 0x20c8 <LCD_DrawPattern+0x1e>
	LCD_SendChar(0b00011100);
	LCD_SendChar(0b00000100);
	LCD_SendChar(0b00000100);
	LCD_SendChar(0b00001010);
	*/
	LCD_SendCmd(FIRST_ADDRESS_DDRAM);
    20f0:	80 e8       	ldi	r24, 0x80	; 128
    20f2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_SendCmd>
	for(int i =0;i<8;i++){
    20f6:	1a 82       	std	Y+2, r1	; 0x02
    20f8:	19 82       	std	Y+1, r1	; 0x01
    20fa:	08 c0       	rjmp	.+16     	; 0x210c <LCD_DrawPattern+0x62>
		LCD_SendChar(FIRST_READ_ADDRESS_DDRAM+i);
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <LCD_SendChar>
	LCD_SendChar(0b00000100);
	LCD_SendChar(0b00000100);
	LCD_SendChar(0b00001010);
	*/
	LCD_SendCmd(FIRST_ADDRESS_DDRAM);
	for(int i =0;i<8;i++){
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	88 30       	cpi	r24, 0x08	; 8
    2112:	91 05       	cpc	r25, r1
    2114:	9c f3       	brlt	.-26     	; 0x20fc <LCD_DrawPattern+0x52>
		LCD_SendChar(FIRST_READ_ADDRESS_DDRAM+i);
	}


}
    2116:	26 96       	adiw	r28, 0x06	; 6
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <delay_us>:
#include "utils.h"
#include "memmap.h"
#include "DIO.h"
#include "Timer.h"

 void delay_us(uint16 uSec){
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	00 d0       	rcall	.+0      	; 0x212e <delay_us+0x6>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <delay_us+0x8>
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03

	if(uSec <= MAX_USEC){
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	20 e8       	ldi	r18, 0x80	; 128
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	92 07       	cpc	r25, r18
    2142:	30 f5       	brcc	.+76     	; 0x2190 <delay_us+0x68>
		// value calculation..
			uint8 counts = (uSec) / 128;
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	88 0f       	add	r24, r24
    214a:	89 2f       	mov	r24, r25
    214c:	88 1f       	adc	r24, r24
    214e:	99 0b       	sbc	r25, r25
    2150:	91 95       	neg	r25
    2152:	8a 83       	std	Y+2, r24	; 0x02
			uint8 tcnt0V = 256-counts;
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	81 95       	neg	r24
    2158:	89 83       	std	Y+1, r24	; 0x01
				// load value into TCNT0
			TCNT0 = tcnt0V;
    215a:	e2 e5       	ldi	r30, 0x52	; 82
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	80 83       	st	Z, r24
	// configure timer0 mode , prescalar 1024 ..
			TCCR0 = (1<<_CS00) | (1<<_CS02);
    2162:	e3 e5       	ldi	r30, 0x53	; 83
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	85 e0       	ldi	r24, 0x05	; 5
    2168:	80 83       	st	Z, r24

			// wait until TOV flag bit set [1]
			while(GET_BIT(TIFR,_TOV0) == 0);
    216a:	e8 e5       	ldi	r30, 0x58	; 88
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	81 70       	andi	r24, 0x01	; 1
    2176:	90 70       	andi	r25, 0x00	; 0
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	b9 f3       	breq	.-18     	; 0x216a <delay_us+0x42>
			// Stop timer
			TCCR0 = 0;
    217c:	e3 e5       	ldi	r30, 0x53	; 83
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	10 82       	st	Z, r1
			// Clear bit ..
			SET_BIT(TIFR,_TOV0);
    2182:	a8 e5       	ldi	r26, 0x58	; 88
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e8 e5       	ldi	r30, 0x58	; 88
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	81 60       	ori	r24, 0x01	; 1
    218e:	8c 93       	st	X, r24
	}

}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <Timer0_NmInit>:
/* detail:- must enable global interrupt and make while(1); after call fucntion ...*/
 void Timer0_NmInit(uint8 tcntV,uint16 n){
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <Timer0_NmInit+0x6>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <Timer0_NmInit+0x8>
    21a6:	0f 92       	push	r0
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	7b 83       	std	Y+3, r23	; 0x03
    21b0:	6a 83       	std	Y+2, r22	; 0x02
	/* load value into TCNT0 */
			TCNT0 = tcntV;
    21b2:	e2 e5       	ldi	r30, 0x52	; 82
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	80 83       	st	Z, r24
			switch (n) {
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	9b 81       	ldd	r25, Y+3	; 0x03
    21be:	9d 83       	std	Y+5, r25	; 0x05
    21c0:	8c 83       	std	Y+4, r24	; 0x04
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	80 34       	cpi	r24, 0x40	; 64
    21c8:	91 05       	cpc	r25, r1
    21ca:	31 f1       	breq	.+76     	; 0x2218 <Timer0_NmInit+0x7a>
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	9d 81       	ldd	r25, Y+5	; 0x05
    21d0:	81 34       	cpi	r24, 0x41	; 65
    21d2:	91 05       	cpc	r25, r1
    21d4:	50 f4       	brcc	.+20     	; 0x21ea <Timer0_NmInit+0x4c>
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	9d 81       	ldd	r25, Y+5	; 0x05
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	99 f0       	breq	.+38     	; 0x2204 <Timer0_NmInit+0x66>
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	88 30       	cpi	r24, 0x08	; 8
    21e4:	91 05       	cpc	r25, r1
    21e6:	99 f0       	breq	.+38     	; 0x220e <Timer0_NmInit+0x70>
    21e8:	25 c0       	rjmp	.+74     	; 0x2234 <Timer0_NmInit+0x96>
    21ea:	8c 81       	ldd	r24, Y+4	; 0x04
    21ec:	9d 81       	ldd	r25, Y+5	; 0x05
    21ee:	21 e0       	ldi	r18, 0x01	; 1
    21f0:	80 30       	cpi	r24, 0x00	; 0
    21f2:	92 07       	cpc	r25, r18
    21f4:	b1 f0       	breq	.+44     	; 0x2222 <Timer0_NmInit+0x84>
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	24 e0       	ldi	r18, 0x04	; 4
    21fc:	80 30       	cpi	r24, 0x00	; 0
    21fe:	92 07       	cpc	r25, r18
    2200:	a9 f0       	breq	.+42     	; 0x222c <Timer0_NmInit+0x8e>
    2202:	18 c0       	rjmp	.+48     	; 0x2234 <Timer0_NmInit+0x96>
			case 0:
				TCCR0 = (1<<_CS00);
    2204:	e3 e5       	ldi	r30, 0x53	; 83
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	80 83       	st	Z, r24
    220c:	13 c0       	rjmp	.+38     	; 0x2234 <Timer0_NmInit+0x96>
				break;
			case 8:
				TCCR0 = (1<<_CS01);
    220e:	e3 e5       	ldi	r30, 0x53	; 83
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	80 83       	st	Z, r24
    2216:	0e c0       	rjmp	.+28     	; 0x2234 <Timer0_NmInit+0x96>
				break;
			case 64:
				TCCR0 = (1<<_CS00) | (1<<_CS01);
    2218:	e3 e5       	ldi	r30, 0x53	; 83
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	80 83       	st	Z, r24
    2220:	09 c0       	rjmp	.+18     	; 0x2234 <Timer0_NmInit+0x96>
				break;
			case 256:
				TCCR0 = (1<<_CS02);
    2222:	e3 e5       	ldi	r30, 0x53	; 83
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	84 e0       	ldi	r24, 0x04	; 4
    2228:	80 83       	st	Z, r24
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <Timer0_NmInit+0x96>
				break;
			case 1024:
				TCCR0 = (1<<_CS00) | (1<<_CS02);
    222c:	e3 e5       	ldi	r30, 0x53	; 83
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	85 e0       	ldi	r24, 0x05	; 5
    2232:	80 83       	st	Z, r24
				}



		// enable interrupt for timer0
	SET_BIT(TIMSK,_TOIE0);
    2234:	a9 e5       	ldi	r26, 0x59	; 89
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e9 e5       	ldi	r30, 0x59	; 89
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	81 60       	ori	r24, 0x01	; 1
    2240:	8c 93       	st	X, r24
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <Timer0_CtcInit>:

 void Timer0_CtcInit(uint8 tcnt0V,uint8 ocr0V,uint16 n){
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <Timer0_CtcInit+0x6>
    2258:	00 d0       	rcall	.+0      	; 0x225a <Timer0_CtcInit+0x8>
    225a:	00 d0       	rcall	.+0      	; 0x225c <Timer0_CtcInit+0xa>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	6a 83       	std	Y+2, r22	; 0x02
    2264:	5c 83       	std	Y+4, r21	; 0x04
    2266:	4b 83       	std	Y+3, r20	; 0x03

	// load value into TCNT0
		TCNT0 = tcnt0V;
    2268:	e2 e5       	ldi	r30, 0x52	; 82
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	80 83       	st	Z, r24
		// configure timer0 CTC mode
		SET_BIT(TCCR0,_WGM01);
    2270:	a3 e5       	ldi	r26, 0x53	; 83
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e3 e5       	ldi	r30, 0x53	; 83
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	88 60       	ori	r24, 0x08	; 8
    227c:	8c 93       	st	X, r24
		switch (n) {
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	80 34       	cpi	r24, 0x40	; 64
    228c:	91 05       	cpc	r25, r1
    228e:	31 f1       	breq	.+76     	; 0x22dc <Timer0_CtcInit+0x8a>
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	81 34       	cpi	r24, 0x41	; 65
    2296:	91 05       	cpc	r25, r1
    2298:	50 f4       	brcc	.+20     	; 0x22ae <Timer0_CtcInit+0x5c>
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	99 f0       	breq	.+38     	; 0x22c8 <Timer0_CtcInit+0x76>
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	88 30       	cpi	r24, 0x08	; 8
    22a8:	91 05       	cpc	r25, r1
    22aa:	99 f0       	breq	.+38     	; 0x22d2 <Timer0_CtcInit+0x80>
    22ac:	25 c0       	rjmp	.+74     	; 0x22f8 <Timer0_CtcInit+0xa6>
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	80 30       	cpi	r24, 0x00	; 0
    22b6:	92 07       	cpc	r25, r18
    22b8:	b1 f0       	breq	.+44     	; 0x22e6 <Timer0_CtcInit+0x94>
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	24 e0       	ldi	r18, 0x04	; 4
    22c0:	80 30       	cpi	r24, 0x00	; 0
    22c2:	92 07       	cpc	r25, r18
    22c4:	a9 f0       	breq	.+42     	; 0x22f0 <Timer0_CtcInit+0x9e>
    22c6:	18 c0       	rjmp	.+48     	; 0x22f8 <Timer0_CtcInit+0xa6>
					case 0:
						TCCR0 = (1<<_CS00);
    22c8:	e3 e5       	ldi	r30, 0x53	; 83
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 83       	st	Z, r24
    22d0:	13 c0       	rjmp	.+38     	; 0x22f8 <Timer0_CtcInit+0xa6>
						break;
					case 8:
						TCCR0 = (1<<_CS01);
    22d2:	e3 e5       	ldi	r30, 0x53	; 83
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	80 83       	st	Z, r24
    22da:	0e c0       	rjmp	.+28     	; 0x22f8 <Timer0_CtcInit+0xa6>
						break;
					case 64:
						TCCR0 = (1<<_CS00) | (1<<_CS01);
    22dc:	e3 e5       	ldi	r30, 0x53	; 83
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	80 83       	st	Z, r24
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <Timer0_CtcInit+0xa6>
						break;
					case 256:
						TCCR0 = (1<<_CS02);
    22e6:	e3 e5       	ldi	r30, 0x53	; 83
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	84 e0       	ldi	r24, 0x04	; 4
    22ec:	80 83       	st	Z, r24
    22ee:	04 c0       	rjmp	.+8      	; 0x22f8 <Timer0_CtcInit+0xa6>
						break;
					case 1024:
						TCCR0 = (1<<_CS00) | (1<<_CS02);
    22f0:	e3 e5       	ldi	r30, 0x53	; 83
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	85 e0       	ldi	r24, 0x05	; 5
    22f6:	80 83       	st	Z, r24
				     	break;
						}

	// load value to be compared with TCNT0 ..
	OCR0 = ocr0V;
    22f8:	ec e5       	ldi	r30, 0x5C	; 92
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	80 83       	st	Z, r24
	// enable interrupt for timer0
		SET_BIT(TIMSK,_OCIE0);
    2300:	a9 e5       	ldi	r26, 0x59	; 89
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e9 e5       	ldi	r30, 0x59	; 89
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	82 60       	ori	r24, 0x02	; 2
    230c:	8c 93       	st	X, r24

}
    230e:	26 96       	adiw	r28, 0x06	; 6
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	08 95       	ret

00002320 <EN_G>:
 void EN_G(void){
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    2328:	af e5       	ldi	r26, 0x5F	; 95
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	ef e5       	ldi	r30, 0x5F	; 95
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	80 68       	ori	r24, 0x80	; 128
    2334:	8c 93       	st	X, r24

}
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <Timer0_FastPwm_NonInverted>:
 void Timer0_FastPwm_NonInverted(uint8 ocr0V,uint16 n){
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <Timer0_FastPwm_NonInverted+0x6>
    2342:	00 d0       	rcall	.+0      	; 0x2344 <Timer0_FastPwm_NonInverted+0x8>
    2344:	0f 92       	push	r0
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	7b 83       	std	Y+3, r23	; 0x03
    234e:	6a 83       	std	Y+2, r22	; 0x02
	OCR0  = ocr0V;
    2350:	ec e5       	ldi	r30, 0x5C	; 92
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	80 83       	st	Z, r24
	switch (n) {
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	9b 81       	ldd	r25, Y+3	; 0x03
    235c:	9d 83       	std	Y+5, r25	; 0x05
    235e:	8c 83       	std	Y+4, r24	; 0x04
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	80 34       	cpi	r24, 0x40	; 64
    2366:	91 05       	cpc	r25, r1
    2368:	31 f1       	breq	.+76     	; 0x23b6 <Timer0_FastPwm_NonInverted+0x7a>
    236a:	8c 81       	ldd	r24, Y+4	; 0x04
    236c:	9d 81       	ldd	r25, Y+5	; 0x05
    236e:	81 34       	cpi	r24, 0x41	; 65
    2370:	91 05       	cpc	r25, r1
    2372:	50 f4       	brcc	.+20     	; 0x2388 <Timer0_FastPwm_NonInverted+0x4c>
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	99 f0       	breq	.+38     	; 0x23a2 <Timer0_FastPwm_NonInverted+0x66>
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	88 30       	cpi	r24, 0x08	; 8
    2382:	91 05       	cpc	r25, r1
    2384:	99 f0       	breq	.+38     	; 0x23ac <Timer0_FastPwm_NonInverted+0x70>
    2386:	25 c0       	rjmp	.+74     	; 0x23d2 <Timer0_FastPwm_NonInverted+0x96>
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	9d 81       	ldd	r25, Y+5	; 0x05
    238c:	21 e0       	ldi	r18, 0x01	; 1
    238e:	80 30       	cpi	r24, 0x00	; 0
    2390:	92 07       	cpc	r25, r18
    2392:	b1 f0       	breq	.+44     	; 0x23c0 <Timer0_FastPwm_NonInverted+0x84>
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	9d 81       	ldd	r25, Y+5	; 0x05
    2398:	24 e0       	ldi	r18, 0x04	; 4
    239a:	80 30       	cpi	r24, 0x00	; 0
    239c:	92 07       	cpc	r25, r18
    239e:	a9 f0       	breq	.+42     	; 0x23ca <Timer0_FastPwm_NonInverted+0x8e>
    23a0:	18 c0       	rjmp	.+48     	; 0x23d2 <Timer0_FastPwm_NonInverted+0x96>
				case 0:
					TCCR0 = (1<<_CS00);
    23a2:	e3 e5       	ldi	r30, 0x53	; 83
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 83       	st	Z, r24
    23aa:	13 c0       	rjmp	.+38     	; 0x23d2 <Timer0_FastPwm_NonInverted+0x96>
					break;
				case 8:
					TCCR0 = (1<<_CS01);
    23ac:	e3 e5       	ldi	r30, 0x53	; 83
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	80 83       	st	Z, r24
    23b4:	0e c0       	rjmp	.+28     	; 0x23d2 <Timer0_FastPwm_NonInverted+0x96>
					break;
				case 64:
					TCCR0 = (1<<_CS00) | (1<<_CS01);
    23b6:	e3 e5       	ldi	r30, 0x53	; 83
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	80 83       	st	Z, r24
    23be:	09 c0       	rjmp	.+18     	; 0x23d2 <Timer0_FastPwm_NonInverted+0x96>
					break;
				case 256:
					TCCR0 = (1<<_CS02);
    23c0:	e3 e5       	ldi	r30, 0x53	; 83
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	84 e0       	ldi	r24, 0x04	; 4
    23c6:	80 83       	st	Z, r24
    23c8:	04 c0       	rjmp	.+8      	; 0x23d2 <Timer0_FastPwm_NonInverted+0x96>
					break;
				case 1024:
					TCCR0 = (1<<_CS00) | (1<<_CS02);
    23ca:	e3 e5       	ldi	r30, 0x53	; 83
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	85 e0       	ldi	r24, 0x05	; 5
    23d0:	80 83       	st	Z, r24
			     	break;
					}
	SET_BIT(TCCR0,_WGM00); // enable FAST
    23d2:	a3 e5       	ldi	r26, 0x53	; 83
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e3 e5       	ldi	r30, 0x53	; 83
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	80 64       	ori	r24, 0x40	; 64
    23de:	8c 93       	st	X, r24
	SET_BIT(TCCR0,_WGM01);
    23e0:	a3 e5       	ldi	r26, 0x53	; 83
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e3 e5       	ldi	r30, 0x53	; 83
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	88 60       	ori	r24, 0x08	; 8
    23ec:	8c 93       	st	X, r24
	SET_BIT(TCCR0,_COM01); // enable non-inverted
    23ee:	a3 e5       	ldi	r26, 0x53	; 83
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e3 e5       	ldi	r30, 0x53	; 83
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	80 62       	ori	r24, 0x20	; 32
    23fa:	8c 93       	st	X, r24
	// enable interrupt for timer0
	SET_BIT(TIMSK,_TOIE0);
    23fc:	a9 e5       	ldi	r26, 0x59	; 89
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e9 e5       	ldi	r30, 0x59	; 89
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	81 60       	ori	r24, 0x01	; 1
    2408:	8c 93       	st	X, r24
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <Timer0_FastPwm_Inverted>:
 void Timer0_FastPwm_Inverted(uint8 ocr0V,uint16 n){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	00 d0       	rcall	.+0      	; 0x2420 <Timer0_FastPwm_Inverted+0x6>
    2420:	00 d0       	rcall	.+0      	; 0x2422 <Timer0_FastPwm_Inverted+0x8>
    2422:	0f 92       	push	r0
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	7b 83       	std	Y+3, r23	; 0x03
    242c:	6a 83       	std	Y+2, r22	; 0x02
	OCR0  = ocr0V;
    242e:	ec e5       	ldi	r30, 0x5C	; 92
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	80 83       	st	Z, r24
	switch (n) {
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	9b 81       	ldd	r25, Y+3	; 0x03
    243a:	9d 83       	std	Y+5, r25	; 0x05
    243c:	8c 83       	std	Y+4, r24	; 0x04
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	80 34       	cpi	r24, 0x40	; 64
    2444:	91 05       	cpc	r25, r1
    2446:	31 f1       	breq	.+76     	; 0x2494 <Timer0_FastPwm_Inverted+0x7a>
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	9d 81       	ldd	r25, Y+5	; 0x05
    244c:	81 34       	cpi	r24, 0x41	; 65
    244e:	91 05       	cpc	r25, r1
    2450:	50 f4       	brcc	.+20     	; 0x2466 <Timer0_FastPwm_Inverted+0x4c>
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	9d 81       	ldd	r25, Y+5	; 0x05
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	99 f0       	breq	.+38     	; 0x2480 <Timer0_FastPwm_Inverted+0x66>
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	88 30       	cpi	r24, 0x08	; 8
    2460:	91 05       	cpc	r25, r1
    2462:	99 f0       	breq	.+38     	; 0x248a <Timer0_FastPwm_Inverted+0x70>
    2464:	25 c0       	rjmp	.+74     	; 0x24b0 <Timer0_FastPwm_Inverted+0x96>
    2466:	8c 81       	ldd	r24, Y+4	; 0x04
    2468:	9d 81       	ldd	r25, Y+5	; 0x05
    246a:	21 e0       	ldi	r18, 0x01	; 1
    246c:	80 30       	cpi	r24, 0x00	; 0
    246e:	92 07       	cpc	r25, r18
    2470:	b1 f0       	breq	.+44     	; 0x249e <Timer0_FastPwm_Inverted+0x84>
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	9d 81       	ldd	r25, Y+5	; 0x05
    2476:	24 e0       	ldi	r18, 0x04	; 4
    2478:	80 30       	cpi	r24, 0x00	; 0
    247a:	92 07       	cpc	r25, r18
    247c:	a9 f0       	breq	.+42     	; 0x24a8 <Timer0_FastPwm_Inverted+0x8e>
    247e:	18 c0       	rjmp	.+48     	; 0x24b0 <Timer0_FastPwm_Inverted+0x96>
				case 0:
					TCCR0 = (1<<_CS00);
    2480:	e3 e5       	ldi	r30, 0x53	; 83
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	80 83       	st	Z, r24
    2488:	13 c0       	rjmp	.+38     	; 0x24b0 <Timer0_FastPwm_Inverted+0x96>
					break;
				case 8:
					TCCR0 = (1<<_CS01);
    248a:	e3 e5       	ldi	r30, 0x53	; 83
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	80 83       	st	Z, r24
    2492:	0e c0       	rjmp	.+28     	; 0x24b0 <Timer0_FastPwm_Inverted+0x96>
					break;
				case 64:
					TCCR0 = (1<<_CS00) | (1<<_CS01);
    2494:	e3 e5       	ldi	r30, 0x53	; 83
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	80 83       	st	Z, r24
    249c:	09 c0       	rjmp	.+18     	; 0x24b0 <Timer0_FastPwm_Inverted+0x96>
					break;
				case 256:
					TCCR0 = (1<<_CS02);
    249e:	e3 e5       	ldi	r30, 0x53	; 83
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	84 e0       	ldi	r24, 0x04	; 4
    24a4:	80 83       	st	Z, r24
    24a6:	04 c0       	rjmp	.+8      	; 0x24b0 <Timer0_FastPwm_Inverted+0x96>
					break;
				case 1024:
					TCCR0 = (1<<_CS00) | (1<<_CS02);
    24a8:	e3 e5       	ldi	r30, 0x53	; 83
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	85 e0       	ldi	r24, 0x05	; 5
    24ae:	80 83       	st	Z, r24
			     	break;
					}
	SET_BIT(TCCR0,_WGM00); // enable FAST
    24b0:	a3 e5       	ldi	r26, 0x53	; 83
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e3 e5       	ldi	r30, 0x53	; 83
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	80 64       	ori	r24, 0x40	; 64
    24bc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,_WGM01);
    24be:	a3 e5       	ldi	r26, 0x53	; 83
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e3 e5       	ldi	r30, 0x53	; 83
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	88 60       	ori	r24, 0x08	; 8
    24ca:	8c 93       	st	X, r24
	// enable inverted
	SET_BIT(TCCR0,_COM01);
    24cc:	a3 e5       	ldi	r26, 0x53	; 83
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e3 e5       	ldi	r30, 0x53	; 83
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	80 62       	ori	r24, 0x20	; 32
    24d8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,_COM01);
    24da:	a3 e5       	ldi	r26, 0x53	; 83
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e3 e5       	ldi	r30, 0x53	; 83
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	80 62       	ori	r24, 0x20	; 32
    24e6:	8c 93       	st	X, r24
	// enable interrupt for timer0
	SET_BIT(TIMSK,_TOIE0);
    24e8:	a9 e5       	ldi	r26, 0x59	; 89
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e9 e5       	ldi	r30, 0x59	; 89
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	81 60       	ori	r24, 0x01	; 1
    24f4:	8c 93       	st	X, r24
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <Timer1_NmInit>:
// TIMER 1 implementation ...

 void Timer1_NmInit(uint16 n){
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <Timer1_NmInit+0x6>
    250c:	00 d0       	rcall	.+0      	; 0x250e <Timer1_NmInit+0x8>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01

	// WRITE TCNT1H ,then TCNT1L  (TCNT1)
	TCNT1H = 0;
    2516:	ed e4       	ldi	r30, 0x4D	; 77
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	10 82       	st	Z, r1
	TCNT1L  = 0;
    251c:	ec e4       	ldi	r30, 0x4C	; 76
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	10 82       	st	Z, r1
	// Choose prescalar division factor.
	switch (n) {
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	80 34       	cpi	r24, 0x40	; 64
    2530:	91 05       	cpc	r25, r1
    2532:	31 f1       	breq	.+76     	; 0x2580 <Timer1_NmInit+0x7a>
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	81 34       	cpi	r24, 0x41	; 65
    253a:	91 05       	cpc	r25, r1
    253c:	50 f4       	brcc	.+20     	; 0x2552 <Timer1_NmInit+0x4c>
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	99 f0       	breq	.+38     	; 0x256c <Timer1_NmInit+0x66>
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	88 30       	cpi	r24, 0x08	; 8
    254c:	91 05       	cpc	r25, r1
    254e:	99 f0       	breq	.+38     	; 0x2576 <Timer1_NmInit+0x70>
    2550:	25 c0       	rjmp	.+74     	; 0x259c <Timer1_NmInit+0x96>
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9c 81       	ldd	r25, Y+4	; 0x04
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	80 30       	cpi	r24, 0x00	; 0
    255a:	92 07       	cpc	r25, r18
    255c:	b1 f0       	breq	.+44     	; 0x258a <Timer1_NmInit+0x84>
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	9c 81       	ldd	r25, Y+4	; 0x04
    2562:	24 e0       	ldi	r18, 0x04	; 4
    2564:	80 30       	cpi	r24, 0x00	; 0
    2566:	92 07       	cpc	r25, r18
    2568:	a9 f0       	breq	.+42     	; 0x2594 <Timer1_NmInit+0x8e>
    256a:	18 c0       	rjmp	.+48     	; 0x259c <Timer1_NmInit+0x96>
				case 0:
					TCCR1B = (1<<_CS10);
    256c:	ee e4       	ldi	r30, 0x4E	; 78
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 83       	st	Z, r24
    2574:	13 c0       	rjmp	.+38     	; 0x259c <Timer1_NmInit+0x96>
					break;
				case 8:
					TCCR1B = (1<<_CS11);
    2576:	ee e4       	ldi	r30, 0x4E	; 78
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	80 83       	st	Z, r24
    257e:	0e c0       	rjmp	.+28     	; 0x259c <Timer1_NmInit+0x96>
					break;
				case 64:
					TCCR1B = (1<<_CS10) | (1<<_CS11);
    2580:	ee e4       	ldi	r30, 0x4E	; 78
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	80 83       	st	Z, r24
    2588:	09 c0       	rjmp	.+18     	; 0x259c <Timer1_NmInit+0x96>
					break;
				case 256:
					TCCR1B = (1<<_CS12);
    258a:	ee e4       	ldi	r30, 0x4E	; 78
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	84 e0       	ldi	r24, 0x04	; 4
    2590:	80 83       	st	Z, r24
    2592:	04 c0       	rjmp	.+8      	; 0x259c <Timer1_NmInit+0x96>
					break;
				case 1024:
					TCCR1B = (1<<_CS10) | (1<<_CS12);
    2594:	ee e4       	ldi	r30, 0x4E	; 78
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	85 e0       	ldi	r24, 0x05	; 5
    259a:	80 83       	st	Z, r24
			     	break;
					}


	// enable interrupt for timer0
		SET_BIT(TIMSK,_TOIE1);
    259c:	a9 e5       	ldi	r26, 0x59	; 89
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e9 e5       	ldi	r30, 0x59	; 89
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	84 60       	ori	r24, 0x04	; 4
    25a8:	8c 93       	st	X, r24

}
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <readICR1>:


 uint16 readICR1(){
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	return (ICR1L | (ICR1H <<7 ));
    25c0:	e6 e4       	ldi	r30, 0x46	; 70
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	e7 e4       	ldi	r30, 0x47	; 71
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	96 95       	lsr	r25
    25d6:	98 2f       	mov	r25, r24
    25d8:	88 27       	eor	r24, r24
    25da:	97 95       	ror	r25
    25dc:	87 95       	ror	r24
    25de:	82 2b       	or	r24, r18
    25e0:	93 2b       	or	r25, r19
}
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <readTCNT1>:

 uint16 readTCNT1(){
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
	return (TCNT1L | (TCNT1H <<7 ));
    25f0:	ec e4       	ldi	r30, 0x4C	; 76
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	ed e4       	ldi	r30, 0x4D	; 77
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	96 95       	lsr	r25
    2606:	98 2f       	mov	r25, r24
    2608:	88 27       	eor	r24, r24
    260a:	97 95       	ror	r25
    260c:	87 95       	ror	r24
    260e:	82 2b       	or	r24, r18
    2610:	93 2b       	or	r25, r19
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <USART_Init>:
#include "DIO.h"
#include "UART.h"



void USART_Init(unsigned long baud){
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	00 d0       	rcall	.+0      	; 0x261e <USART_Init+0x6>
    261e:	00 d0       	rcall	.+0      	; 0x2620 <USART_Init+0x8>
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	69 83       	std	Y+1, r22	; 0x01
    2626:	7a 83       	std	Y+2, r23	; 0x02
    2628:	8b 83       	std	Y+3, r24	; 0x03
    262a:	9c 83       	std	Y+4, r25	; 0x04
	/* Set baud rate */
		UBRRH = (uint8)(baud>>8);
    262c:	e0 e4       	ldi	r30, 0x40	; 64
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	ab 81       	ldd	r26, Y+3	; 0x03
    2636:	bc 81       	ldd	r27, Y+4	; 0x04
    2638:	89 2f       	mov	r24, r25
    263a:	9a 2f       	mov	r25, r26
    263c:	ab 2f       	mov	r26, r27
    263e:	bb 27       	eor	r27, r27
    2640:	80 83       	st	Z, r24
		UBRRL = (uint8)baud;
    2642:	e9 e2       	ldi	r30, 0x29	; 41
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	80 83       	st	Z, r24
		/* Enable receiver and transmitter */
		UCSRB = (1<<RXEN)|(1<<TXEN);
    264a:	ea e2       	ldi	r30, 0x2A	; 42
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	88 e1       	ldi	r24, 0x18	; 24
    2650:	80 83       	st	Z, r24
		/* Set frame format: set select register  , 2stop bit,8data */
		UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
    2652:	e0 e4       	ldi	r30, 0x40	; 64
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	8e e8       	ldi	r24, 0x8E	; 142
    2658:	80 83       	st	Z, r24
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <USART_RxChar>:

char USART_RxChar()
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
	while ( !(UCSRA & (1<<RXC)) );
    2670:	eb e2       	ldi	r30, 0x2B	; 43
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	88 23       	and	r24, r24
    2678:	dc f7       	brge	.-10     	; 0x2670 <USART_RxChar+0x8>
		/* Get and return received data from buffer */
		return UDR;
    267a:	ec e2       	ldi	r30, 0x2C	; 44
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <USART_TxChar>:

void USART_TxChar(char data)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	0f 92       	push	r0
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)) );
    2692:	eb e2       	ldi	r30, 0x2B	; 43
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	80 72       	andi	r24, 0x20	; 32
    269e:	90 70       	andi	r25, 0x00	; 0
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	b9 f3       	breq	.-18     	; 0x2692 <USART_TxChar+0xc>
		/* Put data into buffer, sends the data */
		UDR = data;
    26a4:	ec e2       	ldi	r30, 0x2C	; 44
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	80 83       	st	Z, r24
}
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <USART_SendString>:

void USART_SendString(char *str)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <USART_SendString+0x6>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <USART_SendString+0x8>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    26c4:	1a 82       	std	Y+2, r1	; 0x02
    26c6:	19 82       	std	Y+1, r1	; 0x01
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <USART_SendString+0x34>
	/* Send each char of string till the NULL */
	while (str[i]!=0)
	{
		USART_TxChar(str[i]);
    26ca:	29 81       	ldd	r18, Y+1	; 0x01
    26cc:	3a 81       	ldd	r19, Y+2	; 0x02
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	fc 01       	movw	r30, r24
    26d4:	e2 0f       	add	r30, r18
    26d6:	f3 1f       	adc	r31, r19
    26d8:	80 81       	ld	r24, Z
    26da:	0e 94 43 13 	call	0x2686	; 0x2686 <USART_TxChar>
		i++;
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01

void USART_SendString(char *str)
{
	int i=0;
	/* Send each char of string till the NULL */
	while (str[i]!=0)
    26e8:	29 81       	ldd	r18, Y+1	; 0x01
    26ea:	3a 81       	ldd	r19, Y+2	; 0x02
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	fc 01       	movw	r30, r24
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	80 81       	ld	r24, Z
    26f8:	88 23       	and	r24, r24
    26fa:	39 f7       	brne	.-50     	; 0x26ca <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);
		i++;
	}
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <USART_INT_STRING>:
void USART_INT_STRING(uint8 data){
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	00 d0       	rcall	.+0      	; 0x2710 <USART_INT_STRING+0x6>
    2710:	00 d0       	rcall	.+0      	; 0x2712 <USART_INT_STRING+0x8>
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	8c 83       	std	Y+4, r24	; 0x04
		char SHOWA [3];
		itoa(data,SHOWA,10);
    2718:	8c 81       	ldd	r24, Y+4	; 0x04
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9e 01       	movw	r18, r28
    2720:	2f 5f       	subi	r18, 0xFF	; 255
    2722:	3f 4f       	sbci	r19, 0xFF	; 255
    2724:	b9 01       	movw	r22, r18
    2726:	4a e0       	ldi	r20, 0x0A	; 10
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <itoa>
		USART_SendString(SHOWA);
    272e:	ce 01       	movw	r24, r28
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <USART_SendString>

}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <main>:
unsigned int IBI = 600; // holds the time between beats, must be seeded!
uint8 Pulse ; // true when pulse wave is high, false when it's low
uint8 QS;
int N_cnt, P_cnt;
int i = 0;
int main(void){
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62

	Pulse = 0;
    274c:	10 92 96 00 	sts	0x0096, r1
	QS = 0;
    2750:	10 92 a1 00 	sts	0x00A1, r1
	firstBeat = 1;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	80 93 97 00 	sts	0x0097, r24
	secondBeat = 0;
    275a:	10 92 9e 00 	sts	0x009E, r1
	DIO_SetPinDirection(PD,Pin0,INFREE);
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	60 e0       	ldi	r22, 0x00	; 0
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_SetPinDirection>
	DIO_SetPinDirection(PD,Pin1,OUT);
    2768:	83 e0       	ldi	r24, 0x03	; 3
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	40 e0       	ldi	r20, 0x00	; 0
    276e:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_SetPinDirection>

	LCD_Init(); //initialize LCD
    2772:	0e 94 b6 0b 	call	0x176c	; 0x176c <LCD_Init>
	ADC_Int();
    2776:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_Int>
	USART_Init(51);
    277a:	63 e3       	ldi	r22, 0x33	; 51
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 0c 13 	call	0x2618	; 0x2618 <USART_Init>
	Timer0_CtcInit(0,124,256);
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	6c e7       	ldi	r22, 0x7C	; 124
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	51 e0       	ldi	r21, 0x01	; 1
    278e:	0e 94 29 11 	call	0x2252	; 0x2252 <Timer0_CtcInit>
	EN_G();
    2792:	0e 94 90 11 	call	0x2320	; 0x2320 <EN_G>


	while(1){
	if (QS == 1){
    2796:	80 91 a1 00 	lds	r24, 0x00A1
    279a:	81 30       	cpi	r24, 0x01	; 1
    279c:	e1 f7       	brne	.-8      	; 0x2796 <main+0x52>
		LCD_PutChar_XY(1,1);
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	61 e0       	ldi	r22, 0x01	; 1
    27a2:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_PutChar_XY>
		LCD_IntegerToString(BPM);
    27a6:	80 91 9c 00 	lds	r24, 0x009C
    27aa:	90 91 9d 00 	lds	r25, 0x009D
    27ae:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <LCD_IntegerToString>
    	USART_TxChar(BPM);
    27b2:	80 91 9c 00 	lds	r24, 0x009C
    27b6:	90 91 9d 00 	lds	r25, 0x009D
    27ba:	0e 94 43 13 	call	0x2686	; 0x2686 <USART_TxChar>
    27be:	eb cf       	rjmp	.-42     	; 0x2796 <main+0x52>

000027c0 <__vector_10>:


	return 0;
}

ISR(TIMER0_COMP_vect){
    27c0:	1f 92       	push	r1
    27c2:	0f 92       	push	r0
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	0f 92       	push	r0
    27c8:	11 24       	eor	r1, r1
    27ca:	2f 93       	push	r18
    27cc:	3f 93       	push	r19
    27ce:	4f 93       	push	r20
    27d0:	5f 93       	push	r21
    27d2:	6f 93       	push	r22
    27d4:	7f 93       	push	r23
    27d6:	8f 93       	push	r24
    27d8:	9f 93       	push	r25
    27da:	af 93       	push	r26
    27dc:	bf 93       	push	r27
    27de:	ef 93       	push	r30
    27e0:	ff 93       	push	r31
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <__vector_10+0x28>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
	//READ HEART RATE FROM LCD

	Signal = Read_Analog(ADC0);
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	0e 94 1a 07 	call	0xe34	; 0xe34 <Read_Analog>
    27f2:	90 93 a0 00 	sts	0x00A0, r25
    27f6:	80 93 9f 00 	sts	0x009F, r24
	sampleCounter += 2;
    27fa:	80 91 74 00 	lds	r24, 0x0074
    27fe:	90 91 75 00 	lds	r25, 0x0075
    2802:	a0 91 76 00 	lds	r26, 0x0076
    2806:	b0 91 77 00 	lds	r27, 0x0077
    280a:	02 96       	adiw	r24, 0x02	; 2
    280c:	a1 1d       	adc	r26, r1
    280e:	b1 1d       	adc	r27, r1
    2810:	80 93 74 00 	sts	0x0074, r24
    2814:	90 93 75 00 	sts	0x0075, r25
    2818:	a0 93 76 00 	sts	0x0076, r26
    281c:	b0 93 77 00 	sts	0x0077, r27
	N_cnt = sampleCounter - lastBeatTime;
    2820:	80 91 74 00 	lds	r24, 0x0074
    2824:	90 91 75 00 	lds	r25, 0x0075
    2828:	a0 91 76 00 	lds	r26, 0x0076
    282c:	b0 91 77 00 	lds	r27, 0x0077
    2830:	9c 01       	movw	r18, r24
    2832:	80 91 78 00 	lds	r24, 0x0078
    2836:	90 91 79 00 	lds	r25, 0x0079
    283a:	a0 91 7a 00 	lds	r26, 0x007A
    283e:	b0 91 7b 00 	lds	r27, 0x007B
    2842:	a9 01       	movw	r20, r18
    2844:	48 1b       	sub	r20, r24
    2846:	59 0b       	sbc	r21, r25
    2848:	ca 01       	movw	r24, r20
    284a:	90 93 99 00 	sts	0x0099, r25
    284e:	80 93 98 00 	sts	0x0098, r24
	if(Signal < thresh && N_cnt > (IBI/5)*3){
    2852:	80 91 6c 00 	lds	r24, 0x006C
    2856:	90 91 6d 00 	lds	r25, 0x006D
    285a:	9c 01       	movw	r18, r24
    285c:	80 91 9f 00 	lds	r24, 0x009F
    2860:	90 91 a0 00 	lds	r25, 0x00A0
    2864:	82 17       	cp	r24, r18
    2866:	93 07       	cpc	r25, r19
    2868:	60 f5       	brcc	.+88     	; 0x28c2 <__vector_10+0x102>
    286a:	80 91 98 00 	lds	r24, 0x0098
    286e:	90 91 99 00 	lds	r25, 0x0099
    2872:	fc 01       	movw	r30, r24
    2874:	80 91 72 00 	lds	r24, 0x0072
    2878:	90 91 73 00 	lds	r25, 0x0073
    287c:	25 e0       	ldi	r18, 0x05	; 5
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	b9 01       	movw	r22, r18
    2882:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__udivmodhi4>
    2886:	cb 01       	movw	r24, r22
    2888:	9c 01       	movw	r18, r24
    288a:	c9 01       	movw	r24, r18
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	82 0f       	add	r24, r18
    2892:	93 1f       	adc	r25, r19
    2894:	8e 17       	cp	r24, r30
    2896:	9f 07       	cpc	r25, r31
    2898:	a0 f4       	brcc	.+40     	; 0x28c2 <__vector_10+0x102>
	if (Signal < Trough){
    289a:	80 91 6a 00 	lds	r24, 0x006A
    289e:	90 91 6b 00 	lds	r25, 0x006B
    28a2:	9c 01       	movw	r18, r24
    28a4:	80 91 9f 00 	lds	r24, 0x009F
    28a8:	90 91 a0 00 	lds	r25, 0x00A0
    28ac:	82 17       	cp	r24, r18
    28ae:	93 07       	cpc	r25, r19
    28b0:	40 f4       	brcc	.+16     	; 0x28c2 <__vector_10+0x102>
	Trough = Signal;
    28b2:	80 91 9f 00 	lds	r24, 0x009F
    28b6:	90 91 a0 00 	lds	r25, 0x00A0
    28ba:	90 93 6b 00 	sts	0x006B, r25
    28be:	80 93 6a 00 	sts	0x006A, r24
	}
	}
	if(Signal > thresh && Signal > P_cnt){
    28c2:	80 91 6c 00 	lds	r24, 0x006C
    28c6:	90 91 6d 00 	lds	r25, 0x006D
    28ca:	9c 01       	movw	r18, r24
    28cc:	80 91 9f 00 	lds	r24, 0x009F
    28d0:	90 91 a0 00 	lds	r25, 0x00A0
    28d4:	28 17       	cp	r18, r24
    28d6:	39 07       	cpc	r19, r25
    28d8:	a0 f4       	brcc	.+40     	; 0x2902 <__vector_10+0x142>
    28da:	80 91 9a 00 	lds	r24, 0x009A
    28de:	90 91 9b 00 	lds	r25, 0x009B
    28e2:	9c 01       	movw	r18, r24
    28e4:	80 91 9f 00 	lds	r24, 0x009F
    28e8:	90 91 a0 00 	lds	r25, 0x00A0
    28ec:	28 17       	cp	r18, r24
    28ee:	39 07       	cpc	r19, r25
    28f0:	40 f4       	brcc	.+16     	; 0x2902 <__vector_10+0x142>
	P_cnt = Signal;
    28f2:	80 91 9f 00 	lds	r24, 0x009F
    28f6:	90 91 a0 00 	lds	r25, 0x00A0
    28fa:	90 93 9b 00 	sts	0x009B, r25
    28fe:	80 93 9a 00 	sts	0x009A, r24
	}

	// NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	// signal surges up in value every time there is a pulse
	if (N_cnt > 250){ // avoid high frequency noise
    2902:	80 91 98 00 	lds	r24, 0x0098
    2906:	90 91 99 00 	lds	r25, 0x0099
    290a:	8b 3f       	cpi	r24, 0xFB	; 251
    290c:	91 05       	cpc	r25, r1
    290e:	0c f4       	brge	.+2      	; 0x2912 <__vector_10+0x152>
    2910:	11 c1       	rjmp	.+546    	; 0x2b34 <__vector_10+0x374>
	if ( (Signal > thresh) && (Pulse == 0) && (N_cnt > (IBI/5)*3) ){
    2912:	80 91 6c 00 	lds	r24, 0x006C
    2916:	90 91 6d 00 	lds	r25, 0x006D
    291a:	9c 01       	movw	r18, r24
    291c:	80 91 9f 00 	lds	r24, 0x009F
    2920:	90 91 a0 00 	lds	r25, 0x00A0
    2924:	28 17       	cp	r18, r24
    2926:	39 07       	cpc	r19, r25
    2928:	08 f0       	brcs	.+2      	; 0x292c <__vector_10+0x16c>
    292a:	04 c1       	rjmp	.+520    	; 0x2b34 <__vector_10+0x374>
    292c:	80 91 96 00 	lds	r24, 0x0096
    2930:	88 23       	and	r24, r24
    2932:	09 f0       	breq	.+2      	; 0x2936 <__vector_10+0x176>
    2934:	ff c0       	rjmp	.+510    	; 0x2b34 <__vector_10+0x374>
    2936:	80 91 98 00 	lds	r24, 0x0098
    293a:	90 91 99 00 	lds	r25, 0x0099
    293e:	fc 01       	movw	r30, r24
    2940:	80 91 72 00 	lds	r24, 0x0072
    2944:	90 91 73 00 	lds	r25, 0x0073
    2948:	25 e0       	ldi	r18, 0x05	; 5
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	b9 01       	movw	r22, r18
    294e:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__udivmodhi4>
    2952:	cb 01       	movw	r24, r22
    2954:	9c 01       	movw	r18, r24
    2956:	c9 01       	movw	r24, r18
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	82 0f       	add	r24, r18
    295e:	93 1f       	adc	r25, r19
    2960:	8e 17       	cp	r24, r30
    2962:	9f 07       	cpc	r25, r31
    2964:	08 f0       	brcs	.+2      	; 0x2968 <__vector_10+0x1a8>
    2966:	e6 c0       	rjmp	.+460    	; 0x2b34 <__vector_10+0x374>
	Pulse = 1; // set the Pulse flag when we think there is a pulse
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	80 93 96 00 	sts	0x0096, r24
	IBI = sampleCounter - lastBeatTime; // measure time between beats in mS
    296e:	80 91 74 00 	lds	r24, 0x0074
    2972:	90 91 75 00 	lds	r25, 0x0075
    2976:	a0 91 76 00 	lds	r26, 0x0076
    297a:	b0 91 77 00 	lds	r27, 0x0077
    297e:	9c 01       	movw	r18, r24
    2980:	80 91 78 00 	lds	r24, 0x0078
    2984:	90 91 79 00 	lds	r25, 0x0079
    2988:	a0 91 7a 00 	lds	r26, 0x007A
    298c:	b0 91 7b 00 	lds	r27, 0x007B
    2990:	a9 01       	movw	r20, r18
    2992:	48 1b       	sub	r20, r24
    2994:	59 0b       	sbc	r21, r25
    2996:	ca 01       	movw	r24, r20
    2998:	90 93 73 00 	sts	0x0073, r25
    299c:	80 93 72 00 	sts	0x0072, r24
	lastBeatTime = sampleCounter; // keep track of time for next pulse
    29a0:	80 91 74 00 	lds	r24, 0x0074
    29a4:	90 91 75 00 	lds	r25, 0x0075
    29a8:	a0 91 76 00 	lds	r26, 0x0076
    29ac:	b0 91 77 00 	lds	r27, 0x0077
    29b0:	80 93 78 00 	sts	0x0078, r24
    29b4:	90 93 79 00 	sts	0x0079, r25
    29b8:	a0 93 7a 00 	sts	0x007A, r26
    29bc:	b0 93 7b 00 	sts	0x007B, r27

	if(secondBeat){ // if this is the second beat, if secondBeat == TRUE
    29c0:	80 91 9e 00 	lds	r24, 0x009E
    29c4:	88 23       	and	r24, r24
    29c6:	41 f1       	breq	.+80     	; 0x2a18 <__vector_10+0x258>
	secondBeat = 0; // clear secondBeat flag
    29c8:	10 92 9e 00 	sts	0x009E, r1
	for(i=0; i<=9; i++){ // seed the running total to get a realisitic BPM at startup
    29cc:	10 92 81 00 	sts	0x0081, r1
    29d0:	10 92 80 00 	sts	0x0080, r1
    29d4:	1a c0       	rjmp	.+52     	; 0x2a0a <__vector_10+0x24a>
	rate[i] = IBI;
    29d6:	20 91 80 00 	lds	r18, 0x0080
    29da:	30 91 81 00 	lds	r19, 0x0081
    29de:	80 91 72 00 	lds	r24, 0x0072
    29e2:	90 91 73 00 	lds	r25, 0x0073
    29e6:	ac 01       	movw	r20, r24
    29e8:	c9 01       	movw	r24, r18
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	fc 01       	movw	r30, r24
    29f0:	ee 57       	subi	r30, 0x7E	; 126
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	51 83       	std	Z+1, r21	; 0x01
    29f6:	40 83       	st	Z, r20
	IBI = sampleCounter - lastBeatTime; // measure time between beats in mS
	lastBeatTime = sampleCounter; // keep track of time for next pulse

	if(secondBeat){ // if this is the second beat, if secondBeat == TRUE
	secondBeat = 0; // clear secondBeat flag
	for(i=0; i<=9; i++){ // seed the running total to get a realisitic BPM at startup
    29f8:	80 91 80 00 	lds	r24, 0x0080
    29fc:	90 91 81 00 	lds	r25, 0x0081
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	90 93 81 00 	sts	0x0081, r25
    2a06:	80 93 80 00 	sts	0x0080, r24
    2a0a:	80 91 80 00 	lds	r24, 0x0080
    2a0e:	90 91 81 00 	lds	r25, 0x0081
    2a12:	8a 30       	cpi	r24, 0x0A	; 10
    2a14:	91 05       	cpc	r25, r1
    2a16:	fc f2       	brlt	.-66     	; 0x29d6 <__vector_10+0x216>
	rate[i] = IBI;
	}
	}

	if(firstBeat){ // if it's the first time we found a beat, if firstBeat == TRUE
    2a18:	80 91 97 00 	lds	r24, 0x0097
    2a1c:	88 23       	and	r24, r24
    2a1e:	31 f0       	breq	.+12     	; 0x2a2c <__vector_10+0x26c>
	firstBeat = 0; // clear firstBeat flag
    2a20:	10 92 97 00 	sts	0x0097, r1
	secondBeat = 1; // set the second beat flag
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	80 93 9e 00 	sts	0x009E, r24
    2a2a:	06 c1       	rjmp	.+524    	; 0x2c38 <__vector_10+0x478>
	return; // IBI value is unreliable so discard it
	}


	// keep a running total of the last 10 IBI values
	runningTotal = 0; // clear the runningTotal variable
    2a2c:	10 92 7f 00 	sts	0x007F, r1
    2a30:	10 92 7e 00 	sts	0x007E, r1

	for(i=0; i<=8; i++){ // shift data in the rate array
    2a34:	10 92 81 00 	sts	0x0081, r1
    2a38:	10 92 80 00 	sts	0x0080, r1
    2a3c:	36 c0       	rjmp	.+108    	; 0x2aaa <__vector_10+0x2ea>
	rate[i] = rate[i+1]; // and drop the oldest IBI value
    2a3e:	40 91 80 00 	lds	r20, 0x0080
    2a42:	50 91 81 00 	lds	r21, 0x0081
    2a46:	80 91 80 00 	lds	r24, 0x0080
    2a4a:	90 91 81 00 	lds	r25, 0x0081
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	fc 01       	movw	r30, r24
    2a56:	ee 57       	subi	r30, 0x7E	; 126
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	20 81       	ld	r18, Z
    2a5c:	31 81       	ldd	r19, Z+1	; 0x01
    2a5e:	ca 01       	movw	r24, r20
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	fc 01       	movw	r30, r24
    2a66:	ee 57       	subi	r30, 0x7E	; 126
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	31 83       	std	Z+1, r19	; 0x01
    2a6c:	20 83       	st	Z, r18
	runningTotal += rate[i]; // add up the 9 oldest IBI values
    2a6e:	80 91 80 00 	lds	r24, 0x0080
    2a72:	90 91 81 00 	lds	r25, 0x0081
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	ee 57       	subi	r30, 0x7E	; 126
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	20 81       	ld	r18, Z
    2a82:	31 81       	ldd	r19, Z+1	; 0x01
    2a84:	80 91 7e 00 	lds	r24, 0x007E
    2a88:	90 91 7f 00 	lds	r25, 0x007F
    2a8c:	82 0f       	add	r24, r18
    2a8e:	93 1f       	adc	r25, r19
    2a90:	90 93 7f 00 	sts	0x007F, r25
    2a94:	80 93 7e 00 	sts	0x007E, r24


	// keep a running total of the last 10 IBI values
	runningTotal = 0; // clear the runningTotal variable

	for(i=0; i<=8; i++){ // shift data in the rate array
    2a98:	80 91 80 00 	lds	r24, 0x0080
    2a9c:	90 91 81 00 	lds	r25, 0x0081
    2aa0:	01 96       	adiw	r24, 0x01	; 1
    2aa2:	90 93 81 00 	sts	0x0081, r25
    2aa6:	80 93 80 00 	sts	0x0080, r24
    2aaa:	80 91 80 00 	lds	r24, 0x0080
    2aae:	90 91 81 00 	lds	r25, 0x0081
    2ab2:	89 30       	cpi	r24, 0x09	; 9
    2ab4:	91 05       	cpc	r25, r1
    2ab6:	1c f2       	brlt	.-122    	; 0x2a3e <__vector_10+0x27e>
	rate[i] = rate[i+1]; // and drop the oldest IBI value
	runningTotal += rate[i]; // add up the 9 oldest IBI values
	}

	rate[9] = IBI; // add the latest IBI to the rate array
    2ab8:	80 91 72 00 	lds	r24, 0x0072
    2abc:	90 91 73 00 	lds	r25, 0x0073
    2ac0:	90 93 95 00 	sts	0x0095, r25
    2ac4:	80 93 94 00 	sts	0x0094, r24
	runningTotal += rate[9]; // add the latest IBI to runningTotal
    2ac8:	20 91 94 00 	lds	r18, 0x0094
    2acc:	30 91 95 00 	lds	r19, 0x0095
    2ad0:	80 91 7e 00 	lds	r24, 0x007E
    2ad4:	90 91 7f 00 	lds	r25, 0x007F
    2ad8:	82 0f       	add	r24, r18
    2ada:	93 1f       	adc	r25, r19
    2adc:	90 93 7f 00 	sts	0x007F, r25
    2ae0:	80 93 7e 00 	sts	0x007E, r24
	runningTotal /= 10; // average the last 10 IBI values
    2ae4:	80 91 7e 00 	lds	r24, 0x007E
    2ae8:	90 91 7f 00 	lds	r25, 0x007F
    2aec:	2a e0       	ldi	r18, 0x0A	; 10
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	b9 01       	movw	r22, r18
    2af2:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__divmodhi4>
    2af6:	cb 01       	movw	r24, r22
    2af8:	90 93 7f 00 	sts	0x007F, r25
    2afc:	80 93 7e 00 	sts	0x007E, r24
	BPM = 60000/runningTotal; // how many beats can fit into a minute? that's BPM!
    2b00:	80 91 7e 00 	lds	r24, 0x007E
    2b04:	90 91 7f 00 	lds	r25, 0x007F
    2b08:	9c 01       	movw	r18, r24
    2b0a:	44 27       	eor	r20, r20
    2b0c:	37 fd       	sbrc	r19, 7
    2b0e:	40 95       	com	r20
    2b10:	54 2f       	mov	r21, r20
    2b12:	80 e6       	ldi	r24, 0x60	; 96
    2b14:	9a ee       	ldi	r25, 0xEA	; 234
    2b16:	a0 e0       	ldi	r26, 0x00	; 0
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__divmodsi4>
    2b22:	da 01       	movw	r26, r20
    2b24:	c9 01       	movw	r24, r18
    2b26:	90 93 9d 00 	sts	0x009D, r25
    2b2a:	80 93 9c 00 	sts	0x009C, r24
	QS = 1; // set Quantified Self flag
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	80 93 a1 00 	sts	0x00A1, r24
	// QS FLAG IS NOT CLEARED INSIDE THIS ISR
	}
	}

	if (Signal < thresh && Pulse == 1){ // when the values are going down, the beat is over
    2b34:	80 91 6c 00 	lds	r24, 0x006C
    2b38:	90 91 6d 00 	lds	r25, 0x006D
    2b3c:	9c 01       	movw	r18, r24
    2b3e:	80 91 9f 00 	lds	r24, 0x009F
    2b42:	90 91 a0 00 	lds	r25, 0x00A0
    2b46:	82 17       	cp	r24, r18
    2b48:	93 07       	cpc	r25, r19
    2b4a:	08 f0       	brcs	.+2      	; 0x2b4e <__vector_10+0x38e>
    2b4c:	46 c0       	rjmp	.+140    	; 0x2bda <__vector_10+0x41a>
    2b4e:	80 91 96 00 	lds	r24, 0x0096
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <__vector_10+0x398>
    2b56:	41 c0       	rjmp	.+130    	; 0x2bda <__vector_10+0x41a>

	Pulse = 0; // reset the Pulse flag so we can do it again
    2b58:	10 92 96 00 	sts	0x0096, r1
	amp = P_cnt - Trough; // get amplitude of the pulse wave
    2b5c:	20 91 9a 00 	lds	r18, 0x009A
    2b60:	30 91 9b 00 	lds	r19, 0x009B
    2b64:	80 91 6a 00 	lds	r24, 0x006A
    2b68:	90 91 6b 00 	lds	r25, 0x006B
    2b6c:	a9 01       	movw	r20, r18
    2b6e:	48 1b       	sub	r20, r24
    2b70:	59 0b       	sbc	r21, r25
    2b72:	ca 01       	movw	r24, r20
    2b74:	90 93 6f 00 	sts	0x006F, r25
    2b78:	80 93 6e 00 	sts	0x006E, r24
	thresh = amp/2 + Trough; // set thresh at 50% of the amplitude
    2b7c:	80 91 6e 00 	lds	r24, 0x006E
    2b80:	90 91 6f 00 	lds	r25, 0x006F
    2b84:	9a 83       	std	Y+2, r25	; 0x02
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8c:	99 23       	and	r25, r25
    2b8e:	34 f4       	brge	.+12     	; 0x2b9c <__vector_10+0x3dc>
    2b90:	49 81       	ldd	r20, Y+1	; 0x01
    2b92:	5a 81       	ldd	r21, Y+2	; 0x02
    2b94:	4f 5f       	subi	r20, 0xFF	; 255
    2b96:	5f 4f       	sbci	r21, 0xFF	; 255
    2b98:	5a 83       	std	Y+2, r21	; 0x02
    2b9a:	49 83       	std	Y+1, r20	; 0x01
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	95 95       	asr	r25
    2ba2:	87 95       	ror	r24
    2ba4:	9c 01       	movw	r18, r24
    2ba6:	80 91 6a 00 	lds	r24, 0x006A
    2baa:	90 91 6b 00 	lds	r25, 0x006B
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	90 93 6d 00 	sts	0x006D, r25
    2bb6:	80 93 6c 00 	sts	0x006C, r24
	P_cnt = thresh; // reset these for next time
    2bba:	80 91 6c 00 	lds	r24, 0x006C
    2bbe:	90 91 6d 00 	lds	r25, 0x006D
    2bc2:	90 93 9b 00 	sts	0x009B, r25
    2bc6:	80 93 9a 00 	sts	0x009A, r24
	Trough = thresh;
    2bca:	80 91 6c 00 	lds	r24, 0x006C
    2bce:	90 91 6d 00 	lds	r25, 0x006D
    2bd2:	90 93 6b 00 	sts	0x006B, r25
    2bd6:	80 93 6a 00 	sts	0x006A, r24
	}

	if (N_cnt > 2500){ // if 2.5 seconds go by without a beat
    2bda:	80 91 98 00 	lds	r24, 0x0098
    2bde:	90 91 99 00 	lds	r25, 0x0099
    2be2:	59 e0       	ldi	r21, 0x09	; 9
    2be4:	85 3c       	cpi	r24, 0xC5	; 197
    2be6:	95 07       	cpc	r25, r21
    2be8:	3c f1       	brlt	.+78     	; 0x2c38 <__vector_10+0x478>
	thresh = 512; // set thresh default
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	92 e0       	ldi	r25, 0x02	; 2
    2bee:	90 93 6d 00 	sts	0x006D, r25
    2bf2:	80 93 6c 00 	sts	0x006C, r24
	P_cnt = 512; // set P default
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	92 e0       	ldi	r25, 0x02	; 2
    2bfa:	90 93 9b 00 	sts	0x009B, r25
    2bfe:	80 93 9a 00 	sts	0x009A, r24
	Trough = 512; // set T default
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	92 e0       	ldi	r25, 0x02	; 2
    2c06:	90 93 6b 00 	sts	0x006B, r25
    2c0a:	80 93 6a 00 	sts	0x006A, r24
	lastBeatTime = sampleCounter; // bring the lastBeatTime up to date
    2c0e:	80 91 74 00 	lds	r24, 0x0074
    2c12:	90 91 75 00 	lds	r25, 0x0075
    2c16:	a0 91 76 00 	lds	r26, 0x0076
    2c1a:	b0 91 77 00 	lds	r27, 0x0077
    2c1e:	80 93 78 00 	sts	0x0078, r24
    2c22:	90 93 79 00 	sts	0x0079, r25
    2c26:	a0 93 7a 00 	sts	0x007A, r26
    2c2a:	b0 93 7b 00 	sts	0x007B, r27
	firstBeat = 1; // set these to avoid noise
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	80 93 97 00 	sts	0x0097, r24
	secondBeat = 0; // when we get the heartbeat back
    2c34:	10 92 9e 00 	sts	0x009E, r1
	}


}
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	ff 91       	pop	r31
    2c42:	ef 91       	pop	r30
    2c44:	bf 91       	pop	r27
    2c46:	af 91       	pop	r26
    2c48:	9f 91       	pop	r25
    2c4a:	8f 91       	pop	r24
    2c4c:	7f 91       	pop	r23
    2c4e:	6f 91       	pop	r22
    2c50:	5f 91       	pop	r21
    2c52:	4f 91       	pop	r20
    2c54:	3f 91       	pop	r19
    2c56:	2f 91       	pop	r18
    2c58:	0f 90       	pop	r0
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	0f 90       	pop	r0
    2c5e:	1f 90       	pop	r1
    2c60:	18 95       	reti

00002c62 <__udivmodhi4>:
    2c62:	aa 1b       	sub	r26, r26
    2c64:	bb 1b       	sub	r27, r27
    2c66:	51 e1       	ldi	r21, 0x11	; 17
    2c68:	07 c0       	rjmp	.+14     	; 0x2c78 <__udivmodhi4_ep>

00002c6a <__udivmodhi4_loop>:
    2c6a:	aa 1f       	adc	r26, r26
    2c6c:	bb 1f       	adc	r27, r27
    2c6e:	a6 17       	cp	r26, r22
    2c70:	b7 07       	cpc	r27, r23
    2c72:	10 f0       	brcs	.+4      	; 0x2c78 <__udivmodhi4_ep>
    2c74:	a6 1b       	sub	r26, r22
    2c76:	b7 0b       	sbc	r27, r23

00002c78 <__udivmodhi4_ep>:
    2c78:	88 1f       	adc	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	5a 95       	dec	r21
    2c7e:	a9 f7       	brne	.-22     	; 0x2c6a <__udivmodhi4_loop>
    2c80:	80 95       	com	r24
    2c82:	90 95       	com	r25
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	08 95       	ret

00002c8a <__divmodhi4>:
    2c8a:	97 fb       	bst	r25, 7
    2c8c:	09 2e       	mov	r0, r25
    2c8e:	07 26       	eor	r0, r23
    2c90:	0a d0       	rcall	.+20     	; 0x2ca6 <__divmodhi4_neg1>
    2c92:	77 fd       	sbrc	r23, 7
    2c94:	04 d0       	rcall	.+8      	; 0x2c9e <__divmodhi4_neg2>
    2c96:	e5 df       	rcall	.-54     	; 0x2c62 <__udivmodhi4>
    2c98:	06 d0       	rcall	.+12     	; 0x2ca6 <__divmodhi4_neg1>
    2c9a:	00 20       	and	r0, r0
    2c9c:	1a f4       	brpl	.+6      	; 0x2ca4 <__divmodhi4_exit>

00002c9e <__divmodhi4_neg2>:
    2c9e:	70 95       	com	r23
    2ca0:	61 95       	neg	r22
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255

00002ca4 <__divmodhi4_exit>:
    2ca4:	08 95       	ret

00002ca6 <__divmodhi4_neg1>:
    2ca6:	f6 f7       	brtc	.-4      	; 0x2ca4 <__divmodhi4_exit>
    2ca8:	90 95       	com	r25
    2caa:	81 95       	neg	r24
    2cac:	9f 4f       	sbci	r25, 0xFF	; 255
    2cae:	08 95       	ret

00002cb0 <__divmodsi4>:
    2cb0:	97 fb       	bst	r25, 7
    2cb2:	09 2e       	mov	r0, r25
    2cb4:	05 26       	eor	r0, r21
    2cb6:	0e d0       	rcall	.+28     	; 0x2cd4 <__divmodsi4_neg1>
    2cb8:	57 fd       	sbrc	r21, 7
    2cba:	04 d0       	rcall	.+8      	; 0x2cc4 <__divmodsi4_neg2>
    2cbc:	14 d0       	rcall	.+40     	; 0x2ce6 <__udivmodsi4>
    2cbe:	0a d0       	rcall	.+20     	; 0x2cd4 <__divmodsi4_neg1>
    2cc0:	00 1c       	adc	r0, r0
    2cc2:	38 f4       	brcc	.+14     	; 0x2cd2 <__divmodsi4_exit>

00002cc4 <__divmodsi4_neg2>:
    2cc4:	50 95       	com	r21
    2cc6:	40 95       	com	r20
    2cc8:	30 95       	com	r19
    2cca:	21 95       	neg	r18
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	4f 4f       	sbci	r20, 0xFF	; 255
    2cd0:	5f 4f       	sbci	r21, 0xFF	; 255

00002cd2 <__divmodsi4_exit>:
    2cd2:	08 95       	ret

00002cd4 <__divmodsi4_neg1>:
    2cd4:	f6 f7       	brtc	.-4      	; 0x2cd2 <__divmodsi4_exit>
    2cd6:	90 95       	com	r25
    2cd8:	80 95       	com	r24
    2cda:	70 95       	com	r23
    2cdc:	61 95       	neg	r22
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce4:	08 95       	ret

00002ce6 <__udivmodsi4>:
    2ce6:	a1 e2       	ldi	r26, 0x21	; 33
    2ce8:	1a 2e       	mov	r1, r26
    2cea:	aa 1b       	sub	r26, r26
    2cec:	bb 1b       	sub	r27, r27
    2cee:	fd 01       	movw	r30, r26
    2cf0:	0d c0       	rjmp	.+26     	; 0x2d0c <__udivmodsi4_ep>

00002cf2 <__udivmodsi4_loop>:
    2cf2:	aa 1f       	adc	r26, r26
    2cf4:	bb 1f       	adc	r27, r27
    2cf6:	ee 1f       	adc	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	a2 17       	cp	r26, r18
    2cfc:	b3 07       	cpc	r27, r19
    2cfe:	e4 07       	cpc	r30, r20
    2d00:	f5 07       	cpc	r31, r21
    2d02:	20 f0       	brcs	.+8      	; 0x2d0c <__udivmodsi4_ep>
    2d04:	a2 1b       	sub	r26, r18
    2d06:	b3 0b       	sbc	r27, r19
    2d08:	e4 0b       	sbc	r30, r20
    2d0a:	f5 0b       	sbc	r31, r21

00002d0c <__udivmodsi4_ep>:
    2d0c:	66 1f       	adc	r22, r22
    2d0e:	77 1f       	adc	r23, r23
    2d10:	88 1f       	adc	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	1a 94       	dec	r1
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <__udivmodsi4_loop>
    2d18:	60 95       	com	r22
    2d1a:	70 95       	com	r23
    2d1c:	80 95       	com	r24
    2d1e:	90 95       	com	r25
    2d20:	9b 01       	movw	r18, r22
    2d22:	ac 01       	movw	r20, r24
    2d24:	bd 01       	movw	r22, r26
    2d26:	cf 01       	movw	r24, r30
    2d28:	08 95       	ret

00002d2a <__prologue_saves__>:
    2d2a:	2f 92       	push	r2
    2d2c:	3f 92       	push	r3
    2d2e:	4f 92       	push	r4
    2d30:	5f 92       	push	r5
    2d32:	6f 92       	push	r6
    2d34:	7f 92       	push	r7
    2d36:	8f 92       	push	r8
    2d38:	9f 92       	push	r9
    2d3a:	af 92       	push	r10
    2d3c:	bf 92       	push	r11
    2d3e:	cf 92       	push	r12
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	ca 1b       	sub	r28, r26
    2d54:	db 0b       	sbc	r29, r27
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	09 94       	ijmp

00002d62 <__epilogue_restores__>:
    2d62:	2a 88       	ldd	r2, Y+18	; 0x12
    2d64:	39 88       	ldd	r3, Y+17	; 0x11
    2d66:	48 88       	ldd	r4, Y+16	; 0x10
    2d68:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d70:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d72:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d74:	b9 84       	ldd	r11, Y+9	; 0x09
    2d76:	c8 84       	ldd	r12, Y+8	; 0x08
    2d78:	df 80       	ldd	r13, Y+7	; 0x07
    2d7a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d7c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d7e:	0c 81       	ldd	r16, Y+4	; 0x04
    2d80:	1b 81       	ldd	r17, Y+3	; 0x03
    2d82:	aa 81       	ldd	r26, Y+2	; 0x02
    2d84:	b9 81       	ldd	r27, Y+1	; 0x01
    2d86:	ce 0f       	add	r28, r30
    2d88:	d1 1d       	adc	r29, r1
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	ed 01       	movw	r28, r26
    2d96:	08 95       	ret

00002d98 <itoa>:
    2d98:	fb 01       	movw	r30, r22
    2d9a:	9f 01       	movw	r18, r30
    2d9c:	e8 94       	clt
    2d9e:	42 30       	cpi	r20, 0x02	; 2
    2da0:	c4 f0       	brlt	.+48     	; 0x2dd2 <itoa+0x3a>
    2da2:	45 32       	cpi	r20, 0x25	; 37
    2da4:	b4 f4       	brge	.+44     	; 0x2dd2 <itoa+0x3a>
    2da6:	4a 30       	cpi	r20, 0x0A	; 10
    2da8:	29 f4       	brne	.+10     	; 0x2db4 <itoa+0x1c>
    2daa:	97 fb       	bst	r25, 7
    2dac:	1e f4       	brtc	.+6      	; 0x2db4 <itoa+0x1c>
    2dae:	90 95       	com	r25
    2db0:	81 95       	neg	r24
    2db2:	9f 4f       	sbci	r25, 0xFF	; 255
    2db4:	64 2f       	mov	r22, r20
    2db6:	77 27       	eor	r23, r23
    2db8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__udivmodhi4>
    2dbc:	80 5d       	subi	r24, 0xD0	; 208
    2dbe:	8a 33       	cpi	r24, 0x3A	; 58
    2dc0:	0c f0       	brlt	.+2      	; 0x2dc4 <itoa+0x2c>
    2dc2:	89 5d       	subi	r24, 0xD9	; 217
    2dc4:	81 93       	st	Z+, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	a1 f7       	brne	.-24     	; 0x2db4 <itoa+0x1c>
    2dcc:	16 f4       	brtc	.+4      	; 0x2dd2 <itoa+0x3a>
    2dce:	5d e2       	ldi	r21, 0x2D	; 45
    2dd0:	51 93       	st	Z+, r21
    2dd2:	10 82       	st	Z, r1
    2dd4:	c9 01       	movw	r24, r18
    2dd6:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <strrev>

00002dda <strrev>:
    2dda:	dc 01       	movw	r26, r24
    2ddc:	fc 01       	movw	r30, r24
    2dde:	67 2f       	mov	r22, r23
    2de0:	71 91       	ld	r23, Z+
    2de2:	77 23       	and	r23, r23
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <strrev+0x4>
    2de6:	32 97       	sbiw	r30, 0x02	; 2
    2de8:	04 c0       	rjmp	.+8      	; 0x2df2 <strrev+0x18>
    2dea:	7c 91       	ld	r23, X
    2dec:	6d 93       	st	X+, r22
    2dee:	70 83       	st	Z, r23
    2df0:	62 91       	ld	r22, -Z
    2df2:	ae 17       	cp	r26, r30
    2df4:	bf 07       	cpc	r27, r31
    2df6:	c8 f3       	brcs	.-14     	; 0x2dea <strrev+0x10>
    2df8:	08 95       	ret

00002dfa <_exit>:
    2dfa:	f8 94       	cli

00002dfc <__stop_program>:
    2dfc:	ff cf       	rjmp	.-2      	; 0x2dfc <__stop_program>
